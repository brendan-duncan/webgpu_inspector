import { indentNodeProp, continuedIndent, delimitedIndent, LRLanguage, LanguageSupport } from '@codemirror/language';
import { LRParser, LocalTokenGroup } from '@lezer/lr';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,enable:12, var:30, function:34, private:36, workgroup:38, uniform:40, storage:42, read:44, write:46, read_write:48, bool:54, f32:56, i32:58, u32:60, vec2i:62, vec3i:64, vec4i:66, vec2u:68, vec3u:70, vec4u:72, vec2f:74, vec3f:76, vec4f:78, vec2h:80, vec3h:82, vec4h:84, vec2:86, vec3:88, vec4:90, ptr:92, array:94, mat2x2:96, mat2x3:98, mat2x4:100, mat3x2:102, mat3x3:104, mat3x4:106, mat4x2:108, mat4x3:110, mat4x4:112, atomic:114, sampler:116, sampler_comparison:118, texture_depth_2d:120, texture_depth_2d_array:122, texture_depth_cube:124, texture_depth_cube_array:126, texture_depth_multisampled_2d:128, texture_1d:130, texture_2d:132, texture_2d_array:134, texture_3d:136, texture_cube:138, texture_cube_array:140, texture_multisampled_2d:142, texture_storage_1d:144, texture_storage_2d:146, texture_storage_2d_array:148, texture_storage_3d:150, rgba8unorm:152, rgba8snorm:154, rgba8uint:156, rgba8sint:158, rgba16uint:160, rgba16sint:162, rgba16float:164, r32uint:166, r32sint:168, r32float:170, rg32uint:172, rg32sint:174, rg32float:176, rgba32uint:178, rgba32sint:180, rgba32float:182, true:188, false:190, const:194, override:196, asm:202, bf16:204, do:206, enum:208, f16:210, f64:212, handle:214, i8:216, i16:218, i64:220, mat:222, premerge:224, regardless:226, typedef:228, u8:230, u16:232, u64:234, unless:236, using:238, vec:240, void:242, while:244, bitcast:248, type:296, struct:300, fn:310, return:322, if:324, else:326, switch:328, case:330, fallthrough:332, default:334, loop:336, continuing:340, for:342, let:344, break:370, continue:372, discard:374, import:378, use:386};
const parser = LRParser.deserialize({
  version: 14,
  states: "!$WO!QQPOOP!XOPOOO!^QPO'#G{O!eQPO'#CfOOQO'#Gi'#GiO!jQPO'#CeO&_QPO'#CdO&sQPO'#CcOOQO'#Cc'#CcOOQO'#G}'#G}OOQO'#Gh'#GhO&xQPO'#G{QOQPOOO'PQPO'#C`OOQO'#Gg'#GgO'UQPO'#G`O'^QPO'#G`P'cO`O'#C^POOO)CBk)CBkOOQO-E:e-E:eO'nQPO,5=gO'uQPO,59QOOQO-E:g-E:gO+mQPO,59OO+uQPO,5<VO,mQPO'#CjO,uQPO,5:zO,uQPO,5:zO,zQPO,5<PO-PQPO,5<RO-UQPO'#FlOOQO,58},58}OOQO-E:f-E:fO-ZQPO,58zO-`QPO'#GbOOQO,5<z,5<zO-eQQO,5<zO-jQPO,5<zPOOO'#Gf'#GfP.bO`O,58xPOOO,58x,58xO.mQPO1G.lO.{QPO1G.jO3nQPO'#FqOOQO1G1q1G1qO3uQPO'#HTOOQO'#Cl'#ClO4WQQO'#CuOOQO'#Cu'#CuOOQO,59U,59UO,uQPO,59UO4cQPO1G0fO4hQPO1G0fO4pQPO1G1kO4xQPO1G1mO4}QPO,5<WOOQO1G.f1G.fO5SQQO'#GcO5_QPO,5<|O-`QPO,5<|O5gQPO1G2fO'XQPO1G2fPOOO-E:d-E:dPOOO1G.d1G.dOOQO'#HQ'#HQO5lQPO7+$WO.mQPO7+$WOOQO'#H`'#H`O5tQPO'#H`O5yQPO'#H`OOQO'#Cv'#CvOOQO'#Hh'#HhO6OQPO'#HgOOQO'#Hg'#HgOOQO'#E]'#E]OOQO7+$U7+$UO6TQPO'#H^OOQO'#Ha'#HaOOQO'#Hb'#HbOOQO'#Hc'#HcOOQO'#Hd'#HdO6YQPO'#CvO7gQPO'#CvO5tQPO'#CvO7lQPO'#IYOOQO'#Gr'#GrO7tQPO'#I[O8SQQO'#I]O7tQPO'#I]O9WQQO'#I[O;PQQO'#IZOOQO'#Fr'#FrO;ZQPO'#FrOOQO'#Go'#GoO;`QPO,5<]OOQO,5<],5<]OAPQPO'#H}O;gQPO'#IOO;gQPO'#IQOAWQPO'#IUO,uQPO'#IYOA]QPO'#IVOOQO'#I`'#I`OAbQPO,5=oOOQO'#HV'#HVOAjQPO,5=tOOQO1G.p1G.pO.{QPO7+&QO;gQPO7+&QOAjQPO7+'VODxQPO'#FiOOQO7+'X7+'XOETQPO1G1rOE`QPO,5<}OEeQPO1G2hOOQO1G2h1G2hOEmQPO1G2hOOQO-E:q-E:qOOQO7+(Q7+(QOOQO,5=U,5=UOOQO<<Gr<<GrOEuQPO<<GrOOQO-E:h-E:hOAjQPO'#H[OOQO,5=z,5=zOE}QPO'#HeOGRQPO,5>ROAjQPO,5=xOOQO,59b,59bO3uQPO'#H]O;gQPO,5>tOOQO-E:p-E:pOOQO'#I]'#I]OGYQQO,5>vOH^QPO'#HqOHeQPO,5<^OHjQPO,5>wO;gQPO'#HsOHoQPO'#HsOOQO,5>v,5>vOOQO'#I^'#I^O;gQPO,5>uOOQO,5<^,5<^OOQO-E:m-E:mOOQO1G1w1G1wOIiQSO'#CvO;gQPO'#HrOOQO'#Hp'#HpOJoQPO'#HpOK]QSO'#HoOOQO'#Hn'#HnO;gQPO'#HnOMyQSO'#HmO! OQSO'#HlO! }QSO'#HkO!!kQSO'#HjO!#fQPO'#HuO!#}QPO'#HiO!$SQPO'#HiO!$XQPO'#HiO!$^QPO'#HiO!$cQPO'#HiOOQO'#Ed'#EdO5tQPO'#HpOOQO,5>i,5>iO3iQPO,5>jO!$hQPO,5>lO!$mQPO,5>pO!$wQPO,5>tO!%_QPO,5>qOOQO1G3Z1G3ZO!%iQPO1G3ZOOQO1G3`1G3`OOQO<<Il<<IlOOQO'#Ec'#EcOOQO<<Jq<<JqO!%tQPO'#FjO!%yQPO,5<TO!&RQPO,5<TOOQO,5<T,5<TO!%tQPO'#FoO!&ZQPO'#FnO!&RQPO'#FnO!&cQPO7+'^OOQO1G2i1G2iOOQO7+(S7+(SO!&hQPO7+(SP!&pQPO'#GsOOQOAN=^AN=^P!&uQPO'#GjO!&zQPO,5=vO!'PQPO,5>POOQO'#Hf'#HfO!'UQPO1G3mO.{QPO1G3mOOQO1G3m1G3mO!'^QPO1G3dO!'fQPO,5=wOOQO1G4`1G4`OOQO1G4b1G4bO!'kQPO,5>]O;gQPO,5>]OOQO,5>],5>]OOQO1G1x1G1xOOQO1G4c1G4cO!'sQPO,5>_O!(aQQO,5>_OOQO1G4a1G4aO!)dQPO,5>^OOQO,5>[,5>[OOQO,5>Z,5>ZOOQO,5>Y,5>YO;gQPO,5>VO;gQPO,5>XO;gQPO,5>WO;gQPO,5>UO;gQPO,5>aO;gQPO,5>bO;gQPO,5>cO;gQPO,5>dO;gQPO,5>eO@zQPO,5>[O!)iQPO1G4UO!*yQPO1G4WO!+RQPO1G4[O3iQPO'#F{OOQO1G4[1G4[O!+]QPO1G4[O;gQPO1G4`O!+bQQO'#I]O:[QQO'#IZOOQO'#IX'#IXO!,`QPO'#IWO!,gQPO'#IWO!,lQPO1G4]O!,qQPO7+(uOOQO'#HW'#HWO!,vQQO'#HYOOQO,5<U,5<UO!,{QPO1G1oOOQO1G1o1G1oO!-WQPO1G1oOOQO-E:k-E:kOOQO,5<Z,5<ZO!-`QPO,5=YO!-kQPO,5<YOOQO-E:l-E:lO!-sQWO<<JxOOQO<<Kn<<KnPOQO,5=_,5=_OOQO1G3b1G3bO!%iQPO1G3kO!2]QPO7+)XOOQO7+)X7+)XO!2dQPO7+)XOOQO-E:i-E:iOOQO7+)O7+)OO!2lQPO7+)OOAjQPO1G3cO!8aQPO1G3wOOQO1G3w1G3wO!8hQPO1G3wOOQO-E:j-E:jO!9XQQO1G3yOOQO1G3y1G3yOOQO1G3x1G3xO!:[QSO,5>_OOQO1G3q1G3qOOQO1G3s1G3sOOQO'#Hm'#HmO!<`QSO1G3rO!=nQSO'#HmONWQPO'#HlO!=xQPO'#HkOOQO1G3p1G3pO!>eQPO1G3{O!>lQPO1G3|O!>sQPO1G3}O!>zQPO1G4OO!?RQPO1G4POOQO1G3v1G3vO!?YQPO7+)pOOQO'#Gp'#GpO!?bQPO7+)rO!?mQPO'#IRO!@OQQO'#IROOQO7+)v7+)vO!@TQPO7+)vOOQO,5<g,5<gOOQO7+)z7+)zOOQO,5>s,5>sO!@YQPO,5>rO!@kQPO,5>rO!@pQPO,5>rO3iQPO7+)wOOQO<<La<<LaOOQO7+'Z7+'ZO!@wQPO7+'ZP!ASQPO'#GmO!AXQPO1G1tP!AdQPO'#GnO!AiQPO'#FpOOQOAN@dAN@dO!DzQPO7+)VOOQO<<Ls<<LsO!EPQPO<<LsP!EWQPO'#GkOOQO'#H_'#H_O!E]QPO<<LjO!EbQPO7+(}OOQO7+)c7+)cO!EjQPO7+)cP!EqQPO'#GlOOQO7+)e7+)eO!EvQSO1G3yOOQO'#IP'#IPOOQO<<M[<<M[OOQO-E:n-E:nOOQO<<M^<<M^O!GSQQO'#ISO!?mQPO'#ISO!G[QQO,5>mO!GaQPO,5>mOOQO<<Mb<<MbO8SQQO'#I]O!GfQQO'#I_OOQO'#I_'#I_OOQO1G4^1G4^O!GpQPO1G4^O!HRQPO1G4^OOQO<<Mc<<McOOQO<<Ju<<JuPOQO,5=X,5=XPOQO,5=Y,5=YOAjQPO,5<[OOQO<<Lq<<LqOOQOANB_ANB_POQO,5=V,5=VOOQOANBUANBUOOQO<<Li<<LiO!%iQPO<<LiOOQO<<L}<<L}POQO,5=W,5=WOHtQQO'#CvO!HWQQO'#HoO!;hQPO1G3rO!HsQWO,5=]O!HzQQO,5>nOOQO-E:o-E:oO!ISQPO1G4XO!IXQPO1G4XOOQO,5>y,5>yOOQO7+)x7+)xO!IcQPO7+)xOOQO1G1v1G1vO!ItQPOANBTO!IyQWO1G4YP!JQQPO'#GqO!JVQPO7+)sO!JaQPO'#ITO!JkQPO'#ITOOQO7+)s7+)sO!JpQPO7+)sOOQO<<Md<<MdOOQOG27oG27oPOQO,5=],5=]OOQO<<M_<<M_O!JuQPO<<M_OOQO,5>o,5>oOOQOANByANByO!JzQPO'#HsO!KPQPO'#HnO#![QPO,5>_O!KPQPO,5>VO;gQPO,5>WOLiQSO'#HmO;gQPO'#Hs",
  stateData: "#!j~O%jOSPOS%kPQ~OU]O%T_O%X`O%pXO%rRO_XP#TXP#UXP$YXP$[XP$aXP~O%h%oP~P]O%kaO~O%h%oX~P]OTeO~O%rRO_XX#TXX#UXX$YXX$[XX$aXXTXXkXXlXXmXXnXXoXXpXXqXXrXXsXXtXXuXXvXXwXXxXXyXXzXX{XX|XX}XX!OXX!PXX!QXX!RXX!SXX!TXX!UXX!VXX!WXX!XXX!YXX!ZXX![XX!]XX!^XX!_XX!`XX!aXX!bXX!cXX!dXX!eXX!fXX!gXX!hXX!iXX!jXX!kXX!lXX!mXX~O_iO#TjO#UkO$YlO$[mO$anO~O%poO~O%h%oX~P`OTqO~O%WsO&nrO~O%WuO~O%lvO%mvO%nxO~O%h%oa~P`O%syO_Ya#TYa#UYa$YYa$[Ya$aYa%rYaTYakYalYamYanYaoYapYaqYarYasYatYauYavYawYaxYayYazYa{Ya|Ya}Ya!OYa!PYa!QYa!RYa!SYa!TYa!UYa!VYa!WYa!XYa!YYa!ZYa![Ya!]Ya!^Ya!_Ya!`Ya!aYa!bYa!cYa!dYa!eYa!fYa!gYa!hYa!iYa!jYa!kYa!lYa!mYa~O#OzO%pWa~O&n{O_$_a#T$_a#U$_a$Y$_a$[$_a$a$_a%T$_a%X$_a%h$_a%p$_a%r$_a~OT!PO%x}O~OT!PO~OT!VO~OT!WO~OT!XO~O%p!YO~OT!ZO~O'U!^O~O'V!_O_%Sa#T%Sa#U%Sa$Y%Sa$[%Sa$a%Sa%T%Sa%X%Sa%h%Sa%p%Sa%r%Sa~O%lvO%mvO%n!aO~OT!bOZ!bO[!bO]!bO~OT!hOZ!iO[!iO]!iOk!hOl!hOm!hOn!hOo!hOp!hOq!hOr!hOs!hOt!hOu!hOv!hOw!hOx!hOy!hOz!hO{!sO|!sO}!sO!O!tO!P!nO!Q!sO!R!sO!S!sO!T!sO!U!sO!V!sO!W!sO!X!sO!Y!sO!Z!uO![!oO!]!oO!^!pO!_!pO!`!pO!a!pO!b!pO!c!qO!d!qO!e!qO!f!qO!g!qO!h!qO!i!fO!j!rO!k!rO!l!rO!m!rO#Q!iO#R!iO~OT!yO_iO#v!wO#w!wO$g#SO$h#TO$j#UO$n#VO$q#XO$r#WO%P#YO%Q#YO%R#YO%p!}O%s!zO&n{O~O&o#RO~P2jOa#[Ob#[Oc#[Od#[Oe#[O~O%}#]O#OiX%piX~O#O#_O~O#O#`O%p#Si~O#O#aO%p$Xi~O&n#bO~O%s#dO~O'T#eO%u%VX&o%VX~O%u#fO&o#gO~O%W#jO~O%u#kO%v#lO~O%x#oO~O%x#qO~O%s#rO~O%x#sO~O%x#oO%sjX#OjX%pjX%{jX%ujX&ojX%vjX_jX#TjX#UjX$YjX$[jX$ajX%TjX%XjX%hjX%rjX&njX~O%x#uO~O#O#vO%p&|X~OT#xO#v!wO#w!wO%s!zO~O%s#zO#O'PX#q'PX$s'PX$t'PX$u'PX$v'PX$w'PX$x'PX$y'PX$z'PX${'PX$|'PX$}'PX%O'PX&h'PX~O#q#}O&h$OO#O'OX$s'OX$t'OX$u'OX$v'OX$w'OX$x'OX$y'OX$z'OX${'OX$|'OX$}'OX%O'OX%v'OX~O#O$RO$s$QO$t$QO$u$QO$v$QO$w$QO$x$QO$y$QO$z$QO${$QO$|$QO~O$}#{O%O#{O~P:[O%p$SO~O&o$UO~P2jOT$VOZ!iO[!iO]!iOk!hOl!hOm!hOn!hOo!hOp!hOq!hOr!hOs!hOt!hOu!hOv!hOw!hOx!hOy!hOz!hO{!sO|!sO}!sO!O!tO!P!nO!Q!sO!R!sO!S!sO!T!sO!U!sO!V!sO!W!sO!X!sO!Y!sO!Z!uO![!oO!]!oO!^!pO!_!pO!`!pO!a!pO!b!pO!c!qO!d!qO!e!qO!f!qO!g!qO!h!qO!i!fO!j!rO!k!rO!l!rO!m!rO#Q!iO#R!iO#X$hO#Y$hO#Z$hO#[$hO#]$hO#^$hO#_$hO#`$hO#a$hO#b$hO#c$hO#d$hO#e$hO#f$hO#g$hO#h$hO#i$hO#j$hO#k$hO#l$hO#m$hO#n$hO#p$iO#s$]O#t$]O#u$]O#v$]O#w$]O%s$WO~O%p&qX~P;gO&n$mO~O%s$oO~O%u$qO%{$pO~OT!hOk!hOl!hOm!hOn!hOo!hOp!hOq!hOr!hOs!hOt!hOu!hOv!hOw!hOx!hOy!hOz!hO{!sO|!sO}!sO!O!tO!P!nO!Q!sO!R!sO!S!sO!T!sO!U!sO!V!sO!W!sO!X!sO!Y!sO!Z!uO![!oO!]!oO!^!pO!_!pO!`!pO!a!pO!b!pO!c!qO!d!qO!e!qO!f!qO!g!qO!h!qO!i!fO!j!rO!k!rO!l!rO!m!rO~O%rRO&o$yOTXP~O%rROTXP%v$bP~OT%OO~O&o%POT%ga~O%u%QO&o%PO~O%u#kO%v%SO~O!n%WO!o%WO!p%WO!q%WO!r%WO!s%WO!t%WO!u%WO!v%WO!w%WO!x%WO!y%WO!z%WO!{%WO!|%WO!}%WO~O%v%ZO~P.{O#q#}O&h$OO#O'Oa$s'Oa$t'Oa$u'Oa$v'Oa$w'Oa$x'Oa$y'Oa$z'Oa${'Oa$|'Oa$}'Oa%O'Oa%v'Oa~O%v%bO~P;gO%p%cO~O%v%dO~OT%fO~O#q&dX$T&dX$U&dX%p&dX%sjX%s#oX&h&dX&n&dX%u&dX%v&dX#r&dX~O#s&dX#v&dX#w&dX#x&dX#y&dX#z&dX#{&dX#|&dX#}&dX$O&dX$P&dX$Q&dX$R&dX$S&dX$V&dX$W&dX~PHtO%s#zO~O$T&cX$U&cX%p&cX&n&cX%u&cX%v&cX#r&cX~O#q)WO&h)QO#s&cX#v&cX#w&cX#x&cX#y&cX#z&cX#{&cX#|&cX#}&cX$O&cX$P&cX$Q&cX$R&cX$S&cX$V&cX$W&cX~PJtO#{%lO#|%lO#s&aX#v&aX#x&aX#y&aX#z&aX#}&aX$O&aX$P&aX$Q&aX$R&aX$S&aX$T&aX$U&aX%p&aX&n&aX%u&aX%v&aX#r&aX~O#w&kX$V&lX$W&mX~PLiO#v%mO#x%mO#y%mO#s&`X#z&`X$T&`X$U&`X%p&`X&n&`X%u&`X%v&`X#r&`X~O#}&`X$O&`X$P&`X$Q&`X$R&`X$S&`X~PNWO$T&_X$U&_X%p&_X&n&_X%u&_X%v&_X#r&_X~O#s%nO#z%nO#}&_X$O&_X$P&_X$Q&_X$R&_X$S&_X~P! fO#}%oO$O%oO$P%oO$Q%oO$R%oO$S%oO$T&^X$U&^X%p&^X&n&^X%u&^X%v&^X#r&^X~O$T&iX$U&jX%p&]X&n&]X%u&]X%v&]X#r&]X~O$T%pO~O$U%qO~O#w%rO~O$V%sO~O$W%tO~O&n%wO~O$p%yO&o%zO~P2jO#O%|O~O_iO#v!wO#w!wO$r#WO%s!zO~OT%}O%p&QO~P!$|Of&UOg&UOh&UO~OT&VO~O%u&XO&o&YO~O%rROTXP~O%u&^O%v$bX~O%v&aO~O&o&bOT%ga~O%u&cO~O%u#kO~O%{&dO~O%u&eO~O%u&fO%v&gO~O%u&kO%{&jO~O%u&lO~O%u&mO%v&nO~O#r&qO~O%v&ga$T&ga$U&ga%p&ga&n&ga%u&ga#r&ga~O#q#}O&h$OO#O&ga$s&ga$t&ga$u&ga$v&ga$w&ga$x&ga$y&ga$z&ga${&ga$|&ga$}&ga%O&ga~P!'xO%v&sO~O$i'TOT&ri_&ri#v&ri#w&ri$g&ri$h&ri$j&ri$n&ri$q&ri$r&ri%P&ri%Q&ri%R&ri%p&ri%s&ri&n&ri&o&ri$p&ri$l&ri~O$k'WO$m'XO~O$p%yO&o'YO~P2jO&o'YO~O%s#zO#O'PX#q'PX$s'PX$t'PX$u'PX$v'PX$w'PX$x'PX$y'PX$z'PX${'PX$|'PX&h'PX~O%p'_O~P;gO%p'aO~O%v'bO~O%{'cO~O%}#]O~O&o'dOT%aa%r%aa~O%u'eO&o'dO~OT%ba%r%ba%v$ba~O%u'gO%v$ba~O&p'iO_$dP#T$dP#U$dP$Y$dP$[$dP$a$dP%T$dP%X$dP%h$dP%p$dP%r$dP&n$dP~OT%_aZ%_a[%_a]%_ak%_al%_am%_an%_ao%_ap%_aq%_ar%_as%_at%_au%_av%_aw%_ax%_ay%_az%_a{%_a|%_a}%_a!O%_a!P%_a!Q%_a!R%_a!S%_a!T%_a!U%_a!V%_a!W%_a!X%_a!Y%_a!Z%_a![%_a!]%_a!^%_a!_%_a!`%_a!a%_a!b%_a!c%_a!d%_a!e%_a!f%_a!g%_a!h%_a!i%_a!j%_a!k%_a!l%_a!m%_a#Q%_a#R%_a~O%v'lO~P!.nO%u'mO%v'lO~OT'oOZ'oO['oO~OT%`aZ%`a[%`a]%`ak%`al%`am%`an%`ao%`ap%`aq%`ar%`as%`at%`au%`av%`aw%`ax%`ay%`az%`a{%`a|%`a}%`a!O%`a!P%`a!Q%`a!R%`a!S%`a!T%`a!U%`a!V%`a!W%`a!X%`a!Y%`a!Z%`a![%`a!]%`a!^%`a!_%`a!`%`a!a%`a!b%`a!c%`a!d%`a!e%`a!f%`a!g%`a!h%`a!i%`a!j%`a!k%`a!l%`a!m%`a#Q%`a#R%`a#X%`a#Y%`a#Z%`a#[%`a#]%`a#^%`a#_%`a#`%`a#a%`a#b%`a#c%`a#d%`a#e%`a#f%`a#g%`a#h%`a#i%`a#j%`a#k%`a#l%`a#m%`a#n%`a#p%`a#s%`a#t%`a#u%`a#v%`a#w%`a%s%`a~O%v'rO~P!2wO%u'sO%v'rO~O%v&gi$T&gi$U&gi%p&gi&n&gi%u&gi#r&gi~O#q#}O&h$OO#O&gi$s&gi$t&gi$u&gi$v&gi$w&gi$x&gi$y&gi$z&gi${&gi$|&gi$}&gi%O&gi~P!8pO#q)WO&h)QO#s&ga#v&ga#w&ga#x&ga#y&ga#z&ga#{&ga#|&ga#}&ga$O&ga$P&ga$Q&ga$R&ga$S&ga$V&ga$W&ga~P!'xO#v%mO#x%mO#y%mO#s&`i#z&`i$T&`i$U&`i%p&`i&n&`i%u&`i%v&`i#r&`i~O#}&`i$O&`i$P&`i$Q&`i$R&`i$S&`i~P!;hO#s&aX#v&aX#x&aX#y&aX#z&aX$T&aX$U&aX%p&aX&n&aX%u&aX%v&aX#r&aX~O#{)TO#|)TO~P!<vO#s)UO#z)UO~P! fO%p&]i&n&]i%u&]i%v&]i#r&]i~O$T&ii~P!>SO$U&ji~P!>SO#w&ki~P!>SO$V&li~P!>SO$W&mi~P!>SO$h#TO&n{O~O$k'WO$m'XO&o'zO~OZ!iO[!iO]!iO#Q!iO#R!iO~O%}(OO~O&o(PO~OT(QO#v!wO#w!wO%s!zO%v&za~O%p(UO~O%p(UO~P;gO&o(XOT%aa%r%aa~O%u(YO~OT%ba%r%ba%v$bi~O%u(ZO~O%rROTXPkXPlXPmXPnXPoXPpXPqXPrXPsXPtXPuXPvXPwXPxXPyXPzXP{XP|XP}XP!OXP!PXP!QXP!RXP!SXP!TXP!UXP!VXP!WXP!XXP!YXP!ZXP![XP!]XP!^XP!_XP!`XP!aXP!bXP!cXP!dXP!eXP!fXP!gXP!hXP!iXP!jXP!kXP!lXP!mXP~O%{(]O~O%v(^O~P!.nO%u(_O~O%{(`O~O%u(bO%{(aO~O%v(cO~P!2wO%u(dO~O#q)WO&h)QO#s&gi#v&gi#w&gi#x&gi#y&gi#z&gi#{&gi#|&gi#}&gi$O&gi$P&gi$Q&gi$R&gi$S&gi$V&gi$W&gi~P!8pO%u(hO%}&vX~O%}(kO~O&n(lO~O$}(mO%O(mO~P:[OT(QO#v!wO#w!wO%s!zO%v&zi~O%p(oO~O#q#}O&h$OO~PJtOZ%ea[%ea]%ea#Q%ea#R%ea~O%}&va~P!HbO%u(rO%}&va~O&n(tO~O$l(vO&o(wO~P2jOT(QO#v!wO#w!wO%s!zO%v&zq~O%{(zO~O%}&vi~P!HbO%u({O~O$l(vO&o(|O~P2jO$l(vO&o&wX~P2jO%p)OO~O&o(|O~O&o)PO~OT&tO~OT(eOk!hOl!hOm!hOn!hOo!hOp!hOq!hOr!hOs!hOt!hOu!hOv!hOw!hOx!hOy!hOz!hO{!sO|!sO}!sO!O!tO!P!nO!Q!sO!R!sO!S!sO!T!sO!U!sO!V!sO!W!sO!X!sO!Y!sO!Z!uO![!oO!]!oO!^!pO!_!pO!`!pO!a!pO!b!pO!c!qO!d!qO!e!qO!f!qO!g!qO!h!qO!i!fO!j!rO!k!rO!l!rO!m!rO#X$hO#Y$hO#Z$hO#[$hO#]$hO#^$hO#_$hO#`$hO#a$hO#b$hO#c$hO#d$hO#e$hO#f$hO#g$hO#h$hO#i$hO#j$hO#k$hO#l$hO#m$hO#n$hO#p$iO#s)RO#t)RO#u)RO#v)RO#w)RO%s$WO~P!?mO#r'vO~OP#x][Z#sT[~",
  goto: "@{'TPP'UP'XPP']'c'i'zPPP(WP(ePPPPPPPP(h(wPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP*OPP'cPP*U*_PPPPPPPPPPPPPPPPPPPPPP*|PPPPPPPPPPPPPPPPPPPPPPP'cP+kP+q+t+k+zP+},Q,W,Z,sPPPPPPPP-OPPPPPPPPPPPPPPPPPP']P-U-[PP-b-h-n-x.W.^.d.j.p.v/Q/W/^/oPPPPPPP/uP/xPP0OPP0UP0X0_P0hP0u1P1S1{1S2O2O2w3p4i4l4o4y5t6l7S7i8O8k9l:Z:z;W;xP<[<l<|=^=nPPP>O>X>e>h>q>u>x>h>h?R?U?X?e?v@[@m@r>ORbPT^OQXXOQZdXVOQZdWUOQZdS$v#b$xS$z#d$|R(['ieSOQTZd#b#d$x$|'iQgUa!v{#Q$m$o%x(l(t(uR!SiQ!RiQ!TjQ!UkQ#^!SR$n#WW!jz#_#r%Y!W$Y#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)WQ$r#]Q$u#aQ%U#oQ%[#sQ'q&lR(p([Q!mzR$s#_Q$s#`Q%^#vR']%|!X$X#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)W!X$Y#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)WXWOQZdR#c!WQ$w#bR&Z$xRhUR$}#dQ${#dR&_$|R'j&aQ|h^!}{#Q$m%x(l(t(uQ%v$kQ'[%yQ'w'TR(W'bW#P{#Q$m%xV(u(l(t(uQ%{$mR'Z%xQt_R#j!_Q![rR#h!]QwaR!`wQQORcQQZOQdQTpZdbTOQZd#b#d$x$|'iRfTQ!dyR#n!dQ%Y#rR&i%YQ%a#zR&p%aQ$x#bR&[$xQ$|#dR&`$|Q#Q{S$T#Q%xR%x$mQ'V%wR'y'VQ'|'WR(j'|h!x{!z#Q$m$o%x'_(U(l(o(t(uR#w!xQ!]rR#i!]R[OXYOQZdQ!cyR#m!dR!OiQ#Z}R%]#uQ&T$qQ'k&eR(q(bY!Qijk!S#WQ&W$vR&]$zQ#p!fS#t!s!uR%u$iR#t!t!m!hz#S#T#U#]#_#`#a#o#r#s#v#z#}$R$W$]%Y%a%l%m%n%o%p%q%r%s%t%|&Q&l'a([)R)T)U)WR'p&k!m!ez#S#T#U#]#_#`#a#o#r#s#v#z#}$R$W$]%Y%a%l%m%n%o%p%q%r%s%t%|&Q&l'a([)R)T)U)W!m!fz#S#T#U#]#_#`#a#o#r#s#v#z#}$R$W$]%Y%a%l%m%n%o%p%q%r%s%t%|&Q&l'a([)R)T)U)W!m!gz#S#T#U#]#_#`#a#o#r#s#v#z#}$R$W$]%Y%a%l%m%n%o%p%q%r%s%t%|&Q&l'a([)R)T)U)WR#p!gR%V#qS!lz#_Q%X#rR&h%YW!kz#_#r%Y!W$X#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)WQ'{'WR(i'|Q$j#SQ$k#TQ$l#UU$t#`#v%|Q%`#zQ%e#}Q%g$RQ%h$WQ&o%aQ'`&QQ(V'aR)S)Wl$b#S#T#U#`#v#z#}$R$W%a%|&Q'a)WQ&}%pR'O%qp$a#S#T#U#`#v#z#}$R$W%a%p%q%|&Q'a)WR&|%op$`#S#T#U#`#v#z#}$R$W%a%p%q%|&Q'a)WR&{%op$_#S#T#U#`#v#z#}$R$W%a%p%q%|&Q'a)WQ&x%nQ&z%oR(g)Ul$^#S#T#U#`#v#z#}$R$W%a%|&Q'a)WS%k$])RS&u%l)TQ&v%mS&w%n)UQ&y%oQ'P%rQ'Q%sQ'R%tT)V%p%q!X$[#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)W!S$Z#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)U)WT(f)R)TQ#{!yQ%i$YQ'^%}R(m(Q!W$X#S#T#U#`#v#z#}$R$W$]%a%l%m%n%o%p%q%r%s%t%|&Q'a)R)T)U)WR'S%uQ$P!{Q%_#yS%j$Z(fS&r%f&tT'u&q'vm$c#S#T#U#`#v#z#}$R$W%a%|&Q'a)Wm$d#S#T#U#`#v#z#}$R$W%a%|&Q'a)Wm$e#S#T#U#`#v#z#}$R$W%a%|&Q'a)Wm$f#S#T#U#`#v#z#}$R$W%a%|&Q'a)Wm$g#S#T#U#`#v#z#}$R$W%a%|&Q'a)W_#O{#Q$m%x(l(t(u^!}{#Q$m%x(l(t(uR'w'TR'x'T_!}{#Q$m%x(l(t(uT'U%w'VR'}'WQ(x(lQ(}(tR)O(uR&S$oR&R$o^#O{#Q$m%x(l(t(uR&P$o^#O{#Q$m%x(l(t(uQ&P$oV(S'_(U(o^!|{#Q$m%x(l(t(uQ#|!zQ&O$oV(R'_(U(oh!{{!z#Q$m$o%x'_(U(l(o(t(uR#y!xV$R!|&O(RQ(T'_Q(n(UR(y(o",
  nodeNames: "⚠ LineComment BlockComment Program EnableDirective Identifier Directive LocalDeclaration GlobalVariableDeclaration AttributeList Attribute IntLiteral UintLiteral FloatLiteral VariableDeclaration Keyword VariableQualifier Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword VariableIdentifier TypeDeclaration Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword Keyword Keyword Type Type Type Type Type Type Keyword Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Assign Value Boolean Boolean GlobalConstantDeclaration Keyword Keyword Value Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved FunctionCall Keyword LeftBracket RightBracket Sub Bang Tilde Mul And Div Mod Add Left Right Lt Gt Lte Gte Eq Neq OrOr AndAnd Or Xor TypeAliasDeclaration Keyword StructDeclaration Keyword StructBodyDeclaration StructMember FunctionDeclaration FunctionHeader Keyword ParamList Param ReturnType CompoundStatement Statement Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword ContinuingStatement Keyword Keyword Keyword AddAssign SubAssign MulAssign DivAssign ModAssign AndAssign XorAssign OrAssign LeftAssign RightAssign Inc Dec Keyword Keyword Keyword ImportDeclaration Keyword ImportDeclarationList ImportDeclarationIdentifier String Keyword",
  maxTerm: 283,
  skippedNodes: [0,1,2,194],
  repeatNodeCount: 14,
  tokenData: "8z~R|X^#{pq#{qr$prs$}uv&vvw'Twx'jxy)^yz)cz{)h{|)u|}*[}!O*a!O!P/T!P!Q/]!Q!R0^!R![1x![!]2^!]!^2k!^!_2p!_!`3a!`!a3n!b!c4_!c!}4d!}#O4u#P#Q4z#Q#R5P#R#S4d#T#U5^#U#Y4d#Y#Z6Y#Z#o4d#o#p8U#p#q8Z#q#r8p#r#s8u#y#z#{$f$g#{#BY#BZ#{$IS$I_#{$I|$JO#{$JT$JU#{$KV$KW#{&FU&FV#{~$QY%j~X^#{pq#{#y#z#{$f$g#{#BY#BZ#{$IS$I_#{$I|$JO#{$JT$JU#{$KV$KW#{&FU&FV#{Y$uP#tQ!_!`$xW$}O$SW~%QVOr$}rs%gs#O$}#O#P%l#P;'S$};'S;=`&p<%lO$}~%lO%W~~%oVOr$}rs&Us#O$}#O#P%l#P;'S$};'S;=`&p<%lO$}~&ZV%W~Or$}rs%gs#O$}#O#P%l#P;'S$};'S;=`&p<%lO$}~&sP;=`<%l$}^&{P#yY!_!`'OS'TO$wS~'YQ#wYvw'`!_!`'e~'eO$U~S'jO$xS~'mVOw'jwx%gx#O'j#O#P(S#P;'S'j;'S;=`)W<%lO'j~(VVOw'jwx(lx#O'j#O#P(S#P;'S'j;'S;=`)W<%lO'j~(qV%W~Ow'jwx%gx#O'j#O#P(S#P;'S'j;'S;=`)W<%lO'j~)ZP;=`<%l'j~)cO%s~~)hO%v~^)mP#vY!_!`)pS)uO$uS^)zQ#zY{|*Q!_!`*VS*VO$}SS*[O$sS~*aO%u~~*fU#sY}!O*x!O!P*}!Q!R,Y!R![.h!_!`.y!`!a/OS*}O%OSb+QP!Q![+Tb+YS]b!Q![+T!g!h+f#X#Y+f#Y#Z,Tb+iR{|+r}!O+r!Q![+xb+uP!Q![+xb+}Q]b!Q![+x#Y#Z,Tb,YO]b~,]U!O!P+T!Q![,o!g!h+f!z!{-O#X#Y+f#l#m-Ob,rS!O!P+T!Q![,o!g!h+f#X#Y+f~-RS!O!P-_!Q![.P!c!i.P#T#Z.Pb-bR!Q![-k!c!i-k#T#Z-kb-pT]b!Q![-k!c!i-k!r!s+f#T#Z-k#d#e+f~.UUZ~!O!P-k!Q![.P!c!i.P!r!s+f#T#Z.P#d#e+f~.mSZ~!O!P+T!Q![.h!g!h+f#X#Y+fS/OO$tS`/TO&p`n/YP&h[!Q![+T~/bR#xYz{/k!P!Q/p!_!`0X~/pO%k~~/uSP~OY/pZ;'S/p;'S;=`0R<%lO/p~0UP;=`<%l/pS0^O$vS~0cVZ~!O!P+T!Q![,o!g!h+f!z!{0x#X#Y+f#i#j1s#l#m0x~0{S!O!P-_!Q![1X!c!i1X#T#Z1X~1^VZ~!O!P-k!Q![1X!c!i1X!r!s+f#T#Z1X#d#e+f#i#j1s~1xO[~~1}TZ~!O!P+T!Q![1x!g!h+f#X#Y+f#i#j1sf2cP%}d![!]2fQ2kO'VQ~2pO%p~^2wQ%xQ#}W!^!_2}!_!`3[[3SP#{W!_!`3VS3[O${SW3aO$PW^3fP#OU!_!`3iW3nO$RW^3uQ%{Q$OW!_!`3{!`!a4QW4QO$QW[4VP#|W!_!`4YS4_O$|S~4dO%r~b4iSTb!Q![4d!c!}4d#R#S4d#T#o4d~4zO#q~~5PO#r~^5UP$WY!_!`5XS5^O$ySf5cUTb!Q![4d!c!}4d#R#S4d#T#g4d#g#h5u#h#o4df5|S'TSTb!Q![4d!c!}4d#R#S4d#T#o4df6_UTb!Q![4d!c!}4d#R#S4d#T#f4d#f#g6q#g#o4df6vUTb!Q![4d!c!}4d#R#S4d#T#c4d#c#d7Y#d#o4df7_UTb!Q![4d!c!}4d#R#S4d#T#a4d#a#b7q#b#o4df7xS'USTb!Q![4d!c!}4d#R#S4d#T#o4d~8ZO&n~~8`Q$VY!_!`8f#p#q8kS8kO$zS~8pO$T~~8uO&o~~8zO#u~",
  tokenizers: [1, 2, 3, 4, new LocalTokenGroup("j~RQYZXz{^~^O%m~~aP!P!Qd~iO%n~~", 25, 212)],
  topRules: {"Program":[0,3]},
  specialized: [{term: 5, get: (value) => spec_Identifier[value] || -1}],
  tokenPrec: 4295
});

const parserWithMetadata = parser.configure({
    props: [
        styleTags({
            Assign: tags.operator,
            AddAssign: tags.operator,
            SubAssign: tags.operator,
            MulAssign: tags.operator,
            DivAssign: tags.operator,
            ModAssign: tags.operator,
            LeftAssign: tags.operator,
            RightAssign: tags.operator,
            AndAssign: tags.operator,
            XorAssign: tags.operator,
            OrAssign: tags.operator,
            Add: tags.operator,
            Sub: tags.operator,
            Mul: tags.operator,
            Div: tags.operator,
            Mod: tags.operator,
            Left: tags.operator,
            Right: tags.operator,
            And: tags.operator,
            Xor: tags.operator,
            Or: tags.operator,
            AndAnd: tags.operator,
            OrOr: tags.operator,
            Inc: tags.operator,
            Dec: tags.operator,
            Bang: tags.operator,
            Tilde: tags.operator,
            Eq: tags.operator,
            Neq: tags.operator,
            Lt: tags.operator,
            Lte: tags.operator,
            Gt: tags.operator,
            Gte: tags.operator,
            "<": tags.operator,
            ">": tags.operator,
            ReturnType: tags.operator,
            Comment: tags.comment,
            LineComment: tags.comment,
            BlockComment: tags.comment,
            "FunctionHeader/Identifier": tags.macroName,
            "FunctionCall/Identifier": tags.macroName,
            Keyword: tags.keyword,
            Type: tags.typeName,
            TypeDeclaration: tags.typeName,
            Attribute: tags.attributeName,
            "Attribute/Identifier": tags.attributeName,
            "Attribute/IntLiteral": tags.number,
            IntLiteral: tags.number,
            UintLiteral: tags.number,
            FloatLiteral: tags.number,
            String: tags.string,
            true: tags.number,
            false: tags.number,
            Directive: tags.keyword,
            Identifier: tags.macroName,
        }),
        // https://gitlab.com/unconed/use.gpu/-/blob/master/packages/shader/src/wgsl/highlight/wgsl.grammar
        indentNodeProp.add({
            ifStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
            CompoundStatement: delimitedIndent({ closing: "}" }),
            StructBodyDeclaration: delimitedIndent({ closing: "}" }),
        }),
    ],
});
const wgslLanguage = LRLanguage.define({
    name: "wgsl",
    parser: parserWithMetadata,
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$",
    },
});
function wgsl() {
    return new LanguageSupport(wgslLanguage);
}

export { wgsl, wgslLanguage };
