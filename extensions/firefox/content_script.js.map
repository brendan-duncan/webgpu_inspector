{"version":3,"file":"content_script.js","sources":["../../src/utils/actions.js","../../src/extension/content_script.js","../../src/utils/message_port.js"],"sourcesContent":["export const Actions = {\r\n  CaptureBufferData: \"webgpu_inspect_capture_buffer_data\",\r\n  CaptureBuffers: \"webgpu_inspect_capture_buffers\",\r\n  DeleteObjects: \"webgpu_inspect_delete_objects\",\r\n  ValidationError: \"webgpu_inspect_validation_error\",\r\n  MemoryLeakWarning: \"webgpu_inspect_memory_leak_warning\",\r\n  DeltaTime: \"webgpu_inspect_delta_time\",\r\n  CaptureFrameResults: \"webgpu_inspect_capture_frame_results\",\r\n  CaptureFrameCommands: \"webgpu_inspect_capture_frame_commands\",\r\n  ObjectSetLabel: \"webgpu_inspect_object_set_label\",\r\n  AddObject: \"webgpu_inspect_add_object\",\r\n  ResolveAsyncObject: \"webgpu_inspect_resolve_async_object\",\r\n  DeleteObject: \"webgpu_inspect_delete_object\",\r\n  CaptureTextureFrames: \"webgpu_inspect_capture_texture_frames\",\r\n  CaptureTextureData: \"webgpu_inspect_capture_texture_data\",\r\n  CaptureBufferData: \"webgpu_inspect_capture_buffer_data\",\r\n\r\n  Recording: \"webgpu_record_recording\"\r\n};\r\n\r\nActions.values = new Set(Object.values(Actions));\r\n\r\nexport const PanelActions = {\r\n  RequestTexture: \"webgpu_inspect_request_texture\",\r\n  CompileShader: \"webgpu_inspect_compile_shader\",\r\n  Capture: \"webgpu_inspector_capture\",\r\n  InitializeInspector: \"webgpu_initialize_inspector\",\r\n  InitializeRecorder: \"webgpu_initialize_recorder\"\r\n};\r\n","import { MessagePort } from \"../utils/message_port.js\";\nimport { Actions, PanelActions } from \"../utils/actions.js\";\n\nconst webgpuInspectorLoadedKey = \"WEBGPU_INSPECTOR_LOADED\";\nconst webgpuRecorderLoadedKey = \"WEBGPU_RECORDER_LOADED\";\nconst webgpuInspectorCaptureFrameKey = \"WEBGPU_INSPECTOR_CAPTURE_FRAME\";\n\nconst port = new MessagePort(\"webgpu-inspector-page\", 0, (message) => {\n  let action = message.action;\n  if (!action) {\n    return;\n  }\n\n  if (action === PanelActions.Capture) {\n    const messageString = JSON.stringify(message);\n    sessionStorage.setItem(webgpuInspectorCaptureFrameKey, messageString);\n    if (!inspectorInitialized) {\n      action = PanelActions.InitializeInspector;\n    }\n  }\n  \n  if (action === PanelActions.RequestTexture || action === PanelActions.CompileShader) {\n    window.postMessage(message, \"*\");\n  }\n  \n  if (action === PanelActions.InitializeInspector) {\n    sessionStorage.setItem(webgpuInspectorLoadedKey, \"true\");\n    setTimeout(function () {\n      window.location.reload();\n    }, 50);\n  }\n  \n  if (action === PanelActions.InitializeRecorder) {\n    sessionStorage.setItem(webgpuRecorderLoadedKey, `${message.frames}%${message.filename}`);\n    setTimeout(function () {\n      window.location.reload();\n    }, 50);\n  }\n});\n\nlet inspectorInitialized = false;\n\n// Listen for messages from the page\nwindow.addEventListener('message', (event) => {\n  if (event.source !== window) {\n    return;\n  }\n  const message = event.data;\n  if (typeof message !== 'object' || message === null) {\n    return;\n  }\n\n  const action = message.action;\n\n  if (!Actions.values.has(action)) {\n    return;\n  }\n\n  try {\n    port.postMessage(message);\n  } catch (e) {\n    console.log(\"#### error:\", e);\n  }\n});\n\nfunction injectScriptNode(name, url, attributes) {\n  const script = document.createElement(\"script\");\n  script.id = name;\n  script.src = url;\n\n  if (attributes) {\n    for (const key in attributes) {\n      script.setAttribute(key, attributes[key]);\n    }\n  }\n\n  (document.head || document.documentElement).appendChild(script);\n}\n\n\nif (sessionStorage.getItem(webgpuInspectorLoadedKey)) {\n  injectScriptNode(\"__webgpu_inspector\", chrome.runtime.getURL(\"webgpu_inspector.js\"));\n  sessionStorage.removeItem(webgpuInspectorLoadedKey);\n  inspectorInitialized = true;\n} else if (sessionStorage.getItem(webgpuRecorderLoadedKey)) {\n  const data = sessionStorage.getItem(webgpuRecorderLoadedKey).split(\"%\");\n  injectScriptNode(\"__webgpu_recorder\", chrome.runtime.getURL(\"webgpu_recorder.js\"), {\n    filename: data[1],\n    frames: data[0],\n    removeUnusedResources: 1,\n    messageRecording: 1\n  });\n  sessionStorage.removeItem(webgpuRecorderLoadedKey);\n}\n\nport.postMessage({action: \"PageLoaded\"});\n","export class MessagePort {\r\n  constructor(name, tabId, listener) {\r\n    this.name = name;\r\n    this.tabId = tabId ?? 0;\r\n    this.listeners = [];\r\n    if (listener) {\r\n      this.listeners.push(listener);\r\n    }\r\n    this._port = null;\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    const self = this;\r\n    this._port = chrome.runtime.connect({ name: this.name });\r\n    this._port.onDisconnect.addListener(() => {\r\n      self.reset();\r\n    });\r\n    this._port.onMessage.addListener((message) => {\r\n      for (const listener of self.listeners) {\r\n        listener(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  addListener(listener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  postMessage(message) {\r\n    if (this.tabId) {\r\n      message.tabId = this.tabId;\r\n    }\r\n    try {\r\n      this._port.postMessage(message);\r\n    } catch (e) {\r\n      this.reset();\r\n    }\r\n  }\r\n}\r\n"],"names":["Actions","CaptureBufferData","CaptureBuffers","DeleteObjects","ValidationError","MemoryLeakWarning","DeltaTime","CaptureFrameResults","CaptureFrameCommands","ObjectSetLabel","AddObject","ResolveAsyncObject","DeleteObject","CaptureTextureFrames","CaptureTextureData","Recording","values","Set","Object","PanelActions","webgpuInspectorLoadedKey","webgpuRecorderLoadedKey","port","MessagePort","constructor","name","tabId","listener","this","listeners","push","_port","reset","self","chrome","runtime","connect","onDisconnect","addListener","onMessage","message","postMessage","e","action","messageString","JSON","stringify","sessionStorage","setItem","inspectorInitialized","window","setTimeout","location","reload","frames","filename","injectScriptNode","url","attributes","script","document","createElement","id","src","key","setAttribute","head","documentElement","appendChild","addEventListener","event","source","data","has","console","log","getItem","getURL","removeItem","split","removeUnusedResources","messageRecording"],"mappings":"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"}