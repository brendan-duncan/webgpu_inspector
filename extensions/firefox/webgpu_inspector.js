!function(){async function e(e,t='application/octet-stream'){return await new Promise(((r,s)=>{const o=Object.assign(new FileReader,{onload:()=>r(o.result),onerror:()=>s(o.error)});o.readAsDataURL(new File([e],'',{type:t}))}))}class t{constructor(e){this._lastSlotId=0,this.slots=new Map,e&&(this.name=e)}static get enabled(){return 0==t._disableSignals}static get disabled(){return t._disableSignals>0}static disable(){return t._disableSignals++}static enable(e){return e?(t._disableSignals=0,0):t._disableSignals>0?t._disableSignals--:0}static disconnect(e,r,s){for(const o in e){const i=e[o];i.constructor===t&&i.disconnect(r,s)}}static getSignals(e,r){r=r||[];for(const s in e){const o=e[s];o.constructor===t&&r.push(o)}return r}get hasListeners(){return this.slots.size>0}emit(){if(!t.disabled)for(const e of this.slots){const r=e[1][0],s=e[1][1]||r;r&&(r.constructor===t?r.emit.apply(s,arguments):r.apply(s,arguments))}}addListener(e,t){return this.isListening(e,t)?null:(this.slots.set(this._lastSlotId++,[e,t]),this._lastSlotId-1)}isListening(e,t){for(const r of this.slots){const s=r[1];if(e&&!t){if(s[0]===e||s[1]===e)return!0}else if(!e&&t){if(s[1]===t)return!0}else if(s[0]===e&&s[1]===t)return!0}return!1}disconnect(e,t){if(null==e&&null==t)return this.slots.clear(),!0;if(e.constructor===Number){const t=e;return!!this.slots.has(t)&&(this.slots.delete(t),!0)}let r=!1;for(const s of this.slots){const o=s[0],i=s[1];e&&!t?i[0]!==e&&i[1]!==e||(this.slots.delete(o),r=!0):!e&&t?i[1]===t&&(this.slots.delete(o),r=!0):i[0]===e&&i[1]===t&&(this.slots.delete(o),r=!0)}return r}}function r(){if(!Error.captureStackTrace)return'';const e={};if(Error.captureStackTrace(e,r),!e.stack)return'';return e.stack.split('\n').map((e=>e.split('at ')[1])).slice(2).filter((e=>e&&!e.includes('webgpu_inspector.js'))).join('\n')}t._disableSignals=0;const s=new Set([GPUAdapter,GPUDevice,GPUBuffer,GPUTexture,GPUTextureView,GPUSampler,GPUBindGroupLayout,GPUBindGroup,GPUPipelineLayout,GPUShaderModule,GPUComputePipeline,GPURenderPipeline,GPUCommandBuffer,GPUCommandEncoder,GPUComputePassEncoder,GPURenderPassEncoder,GPURenderBundle,GPUQueue,GPUQuerySet,GPUCanvasContext]),o=new Set(['createBuffer','createTexture','createSampler','importExternalTexture','createBindGroupLayout','createPipelineLayout','createBindGroup','createShaderModule','createComputePipeline','createRenderPipeline','createComputePipelineAsync','createRenderPipelineAsync','createCommandEncoder','createRenderBundleEncoder','createQuerySet','createView']);class i{constructor(e){this._idGenerator=e,this.onPreCall=new t,this.onPostCall=new t,this.onPromise=new t,this.onPromiseResolve=new t,this.recordStacktraces=!1,this._skipRecord=0,this._wrapGPUTypes()}_wrapGPUTypes(){GPU.prototype.requestAdapter=this._wrapMethod('requestAdapter',GPU.prototype.requestAdapter),GPU.prototype.getPreferredFormat=this._wrapMethod('getPreferredFormat',GPU.prototype.getPreferredFormat),GPUAdapter.prototype.requestDevice=this._wrapMethod('requestDevice',GPUAdapter.prototype.requestDevice),GPUDevice.prototype.destroy=this._wrapMethod('destroy',GPUDevice.prototype.destroy),GPUDevice.prototype.createBuffer=this._wrapMethod('createBuffer',GPUDevice.prototype.createBuffer),GPUDevice.prototype.createTexture=this._wrapMethod('createTexture',GPUDevice.prototype.createTexture),GPUDevice.prototype.createSampler=this._wrapMethod('createSampler',GPUDevice.prototype.createSampler),GPUDevice.prototype.importExternalTexture=this._wrapMethod('importExternalTexture',GPUDevice.prototype.importExternalTexture),GPUDevice.prototype.createBindGroupLayout=this._wrapMethod('createBindGroupLayout',GPUDevice.prototype.createBindGroupLayout),GPUDevice.prototype.createPipelineLayout=this._wrapMethod('createPipelineLayout',GPUDevice.prototype.createPipelineLayout),GPUDevice.prototype.createBindGroup=this._wrapMethod('createBindGroup',GPUDevice.prototype.createBindGroup),GPUDevice.prototype.createShaderModule=this._wrapMethod('createShaderModule',GPUDevice.prototype.createShaderModule),GPUDevice.prototype.createComputePipeline=this._wrapMethod('createComputePipeline',GPUDevice.prototype.createComputePipeline),GPUDevice.prototype.createRenderPipeline=this._wrapMethod('createRenderPipeline',GPUDevice.prototype.createRenderPipeline),GPUDevice.prototype.createComputePipelineAsync=this._wrapMethod('createComputePipelineAsync',GPUDevice.prototype.createComputePipelineAsync),GPUDevice.prototype.createRenderPipelineAsync=this._wrapMethod('createRenderPipelineAsync',GPUDevice.prototype.createRenderPipelineAsync),GPUDevice.prototype.createCommandEncoder=this._wrapMethod('createCommandEncoder',GPUDevice.prototype.createCommandEncoder),GPUDevice.prototype.createRenderBundleEncoder=this._wrapMethod('createRenderBundleEncoder',GPUDevice.prototype.createRenderBundleEncoder),GPUDevice.prototype.createQuerySet=this._wrapMethod('createQuerySet',GPUDevice.prototype.createQuerySet),GPUBuffer.prototype.mapAsync=this._wrapMethod('mapAsync',GPUBuffer.prototype.mapAsync),GPUBuffer.prototype.getMappedRange=this._wrapMethod('getMappedRange',GPUBuffer.prototype.getMappedRange),GPUBuffer.prototype.unmap=this._wrapMethod('unmap',GPUBuffer.prototype.unmap),GPUBuffer.prototype.destroy=this._wrapMethod('destroy',GPUBuffer.prototype.destroy),GPUTexture.prototype.createView=this._wrapMethod('createView',GPUTexture.prototype.createView),GPUTexture.prototype.destroy=this._wrapMethod('destroy',GPUTexture.prototype.destroy),GPUShaderModule.prototype.getCompilationInfo=this._wrapMethod('getCompilationInfo',GPUShaderModule.prototype.getCompilationInfo),GPUComputePipeline.prototype.getBindGroupLayout=this._wrapMethod('getBindGroupLayout',GPUComputePipeline.prototype.getBindGroupLayout),GPURenderPipeline.prototype.getBindGroupLayout=this._wrapMethod('getBindGroupLayout',GPURenderPipeline.prototype.getBindGroupLayout),GPUCommandEncoder.prototype.beginRenderPass=this._wrapMethod('beginRenderPass',GPUCommandEncoder.prototype.beginRenderPass),GPUCommandEncoder.prototype.beginComputePass=this._wrapMethod('beginComputePass',GPUCommandEncoder.prototype.beginComputePass),GPUCommandEncoder.prototype.copyBufferToBuffer=this._wrapMethod('copyBufferToBuffer',GPUCommandEncoder.prototype.copyBufferToBuffer),GPUCommandEncoder.prototype.copyBufferToTexture=this._wrapMethod('copyBufferToTexture',GPUCommandEncoder.prototype.copyBufferToTexture),GPUCommandEncoder.prototype.copyTextureToBuffer=this._wrapMethod('copyTextureToBuffer',GPUCommandEncoder.prototype.copyTextureToBuffer),GPUCommandEncoder.prototype.copyTextureToTexture=this._wrapMethod('copyTextureToTexture',GPUCommandEncoder.prototype.copyTextureToTexture),GPUCommandEncoder.prototype.clearBuffer=this._wrapMethod('clearBuffer',GPUCommandEncoder.prototype.clearBuffer),GPUCommandEncoder.prototype.resolveQuerySet=this._wrapMethod('resolveQuerySet',GPUCommandEncoder.prototype.resolveQuerySet),GPUCommandEncoder.prototype.finish=this._wrapMethod('finish',GPUCommandEncoder.prototype.finish),GPUCommandEncoder.prototype.pushDebugGroup=this._wrapMethod('pushDebugGroup',GPUCommandEncoder.prototype.pushDebugGroup),GPUCommandEncoder.prototype.popDebugGroup=this._wrapMethod('popDebugGroup',GPUCommandEncoder.prototype.popDebugGroup),GPUCommandEncoder.prototype.insertDebugMarker=this._wrapMethod('insertDebugMarker',GPUCommandEncoder.prototype.insertDebugMarker),GPUComputePassEncoder.prototype.setPipeline=this._wrapMethod('setPipeline',GPUComputePassEncoder.prototype.setPipeline),GPUComputePassEncoder.prototype.dispatchWorkgroups=this._wrapMethod('dispatchWorkgroups',GPUComputePassEncoder.prototype.dispatchWorkgroups),GPUComputePassEncoder.prototype.dispatchWorkgroupsIndirect=this._wrapMethod('dispatchWorkgroupsIndirect',GPUComputePassEncoder.prototype.dispatchWorkgroupsIndirect),GPUComputePassEncoder.prototype.end=this._wrapMethod('end',GPUComputePassEncoder.prototype.end),GPUComputePassEncoder.prototype.setBindGroup=this._wrapMethod('setBindGroup',GPUComputePassEncoder.prototype.setBindGroup),GPUComputePassEncoder.prototype.setBindGroup=this._wrapMethod('setBindGroup',GPUComputePassEncoder.prototype.setBindGroup),GPUComputePassEncoder.prototype.pushDebugGroup=this._wrapMethod('pushDebugGroup',GPUComputePassEncoder.prototype.pushDebugGroup),GPUComputePassEncoder.prototype.popDebugGroup=this._wrapMethod('popDebugGroup',GPUComputePassEncoder.prototype.popDebugGroup),GPUComputePassEncoder.prototype.insertDebugMarker=this._wrapMethod('insertDebugMarker',GPUComputePassEncoder.prototype.insertDebugMarker),GPURenderPassEncoder.prototype.setViewport=this._wrapMethod('setViewport',GPURenderPassEncoder.prototype.setViewport),GPURenderPassEncoder.prototype.setScissorRect=this._wrapMethod('setScissorRect',GPURenderPassEncoder.prototype.setScissorRect),GPURenderPassEncoder.prototype.setBlendConstant=this._wrapMethod('setBlendConstant',GPURenderPassEncoder.prototype.setBlendConstant),GPURenderPassEncoder.prototype.setStencilReference=this._wrapMethod('setStencilReference',GPURenderPassEncoder.prototype.setStencilReference),GPURenderPassEncoder.prototype.beginOcclusionQuery=this._wrapMethod('beginOcclusionQuery',GPURenderPassEncoder.prototype.beginOcclusionQuery),GPURenderPassEncoder.prototype.endOcclusionQuery=this._wrapMethod('endOcclusionQuery',GPURenderPassEncoder.prototype.endOcclusionQuery),GPURenderPassEncoder.prototype.executeBundles=this._wrapMethod('executeBundles',GPURenderPassEncoder.prototype.executeBundles),GPURenderPassEncoder.prototype.end=this._wrapMethod('end',GPURenderPassEncoder.prototype.end),GPURenderPassEncoder.prototype.setPipeline=this._wrapMethod('setPipeline',GPURenderPassEncoder.prototype.setPipeline),GPURenderPassEncoder.prototype.setIndexBuffer=this._wrapMethod('setIndexBuffer',GPURenderPassEncoder.prototype.setIndexBuffer),GPURenderPassEncoder.prototype.setVertexBuffer=this._wrapMethod('setVertexBuffer',GPURenderPassEncoder.prototype.setVertexBuffer),GPURenderPassEncoder.prototype.draw=this._wrapMethod('draw',GPURenderPassEncoder.prototype.draw),GPURenderPassEncoder.prototype.drawIndexed=this._wrapMethod('drawIndexed',GPURenderPassEncoder.prototype.drawIndexed),GPURenderPassEncoder.prototype.drawIndirect=this._wrapMethod('drawIndirect',GPURenderPassEncoder.prototype.drawIndirect),GPURenderPassEncoder.prototype.drawIndexedIndirect=this._wrapMethod('drawIndexedIndirect',GPURenderPassEncoder.prototype.drawIndexedIndirect),GPURenderPassEncoder.prototype.setBindGroup=this._wrapMethod('setBindGroup',GPURenderPassEncoder.prototype.setBindGroup),GPURenderPassEncoder.prototype.pushDebugGroup=this._wrapMethod('pushDebugGroup',GPURenderPassEncoder.prototype.pushDebugGroup),GPURenderPassEncoder.prototype.popDebugGroup=this._wrapMethod('popDebugGroup',GPURenderPassEncoder.prototype.popDebugGroup),GPURenderPassEncoder.prototype.insertDebugMarker=this._wrapMethod('insertDebugMarker',GPURenderPassEncoder.prototype.insertDebugMarker),GPUQueue.prototype.submit=this._wrapMethod('submit',GPUQueue.prototype.submit),GPUQueue.prototype.writeBuffer=this._wrapMethod('writeBuffer',GPUQueue.prototype.writeBuffer),GPUQueue.prototype.writeTexture=this._wrapMethod('writeTexture',GPUQueue.prototype.writeTexture),GPUQueue.prototype.copyExternalImageToTexture=this._wrapMethod('copyExternalImageToTexture',GPUQueue.prototype.copyExternalImageToTexture),GPUQuerySet.prototype.destroy=this._wrapMethod('destroy',GPUQuerySet.prototype.destroy),GPUCanvasContext.prototype.configure=this._wrapMethod('configure',GPUCanvasContext.prototype.configure),GPUCanvasContext.prototype.unconfigure=this._wrapMethod('unconfigure',GPUCanvasContext.prototype.unconfigure),GPUCanvasContext.prototype.getCurrentTexture=this._wrapMethod('getCurrentTexture',GPUCanvasContext.prototype.getCurrentTexture)}disableRecording(){this._skipRecord++}enableRecording(){this._skipRecord--,this._skipRecord<0&&(this._skipRecord=0)}get isRecordingEnabled(){return 0===this._skipRecord}_wrapMethod(e,t){const s=this;return function(){const i=this,n=[...arguments];if(s._skipRecord>0)return t.call(i,...n);s.onPreCall.emit(i,e,n);const a=t.call(i,...n),c=o.has(e),p=s.recordStacktraces||c?r():void 0;if(a instanceof Promise){const t=s._idGenerator.getNextId(i);s.onPromise.emit(i,e,n,t,p);const r=a,o=new Promise((o=>{r.then((r=>{s.onPromiseResolve.emit(i,e,n,t,r,p),o(r)}))}));return o}return s.onPostCall.emit(i,e,n,a,p),a}}}const n={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},'rgba8unorm-srgb':{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},'bgra8unorm-srgb':{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:'depth32float'},'depth24plus-stencil8':{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:'depth32float'},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1},'depth32float-stencil8':{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:'depth32float'},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1},'bc1-rgba-unorm':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'bc1-rgba-unorm-srgb':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'bc2-rgba-unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc2-rgba-unorm-srgb':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc3-rgba-unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc3-rgba-unorm-srgb':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc4-r-unorm':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'bc4-r-snorm':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'bc5-rg-unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc5-rg-snorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc6h-rgb-ufloat':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc6h-rgb-float':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc7-rgba-unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'bc7-rgba-unorm-srgb':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgb8unorm':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgb8unorm-srgb':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgb8a1unorm':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgb8a1unorm-srgb':{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgba8unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'etc2-rgba8unorm-srgb':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'eac-r11unorm':{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0},'eac-r11snorm':{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0},'eac-rg11unorm':{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0},'eac-rg11snorm':{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0},'astc-4x4-unorm':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'astc-4x4-unorm-srgb':{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0},'astc-5x4-unorm':{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0},'astc-5x4-unorm-srgb':{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0},'astc-5x5-unorm':{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0},'astc-5x5-unorm-srgb':{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0},'astc-6x5-unorm':{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0},'astc-6x5-unorm-srgb':{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0},'astc-6x6-unorm':{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0},'astc-6x6-unorm-srgb':{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0},'astc-8x5-unorm':{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0},'astc-8x5-unorm-srgb':{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0},'astc-8x6-unorm':{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0},'astc-8x6-unorm-srgb':{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0},'astc-8x8-unorm':{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0},'astc-8x8-unorm-srgb':{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0},'astc-10x5-unorm':{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0},'astc-10x5-unorm-srgb':{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0},'astc-10x6-unorm':{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0},'astc-10x6-unorm-srgb':{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0},'astc-10x8-unorm':{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0},'astc-10x8-unorm-srgb':{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0},'astc-10x10-unorm':{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0},'astc-10x10-unorm-srgb':{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0},'astc-12x10-unorm':{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0},'astc-12x10-unorm-srgb':{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0},'astc-12x12-unorm':{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0},'astc-12x12-unorm-srgb':{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0}};class a{constructor(e){this.device=e,this.blitShaderModule=e.createShaderModule({code:a.blitShader}),this.multisampleBlitShaderModule=e.createShaderModule({code:a.multisampleBlitShader}),this.blitDepthShaderModule=e.createShaderModule({code:a.blitDepthShader}),this.blitPipelines={},this.blitDepthPipelines={},this.bindGroupLayouts=new Map,this.pipelineLayouts=new Map,this.pointSampler=e.createSampler({magFilter:'nearest',minFilter:'nearest'}),this.displayUniformBuffer=e.createBuffer({size:8,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.displayBingGroupLayout=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:'uniform'}}]}),this.displayBindGroup=e.createBindGroup({layout:this.displayBingGroupLayout,entries:[{binding:0,resource:{buffer:this.displayUniformBuffer}}]})}copyDepthTexture(e,t){const r=e.width,s=e.height,o=e.usage|GPUTextureUsage.RENDER_TARGET|GPUTextureUsage.COPY_SRC,i=[r,s,1],n=this.device.createTexture({format:t,size:i,usage:o});let a=this.blitDepthPipelines[t];a||(a=this.device.createRenderPipeline({layout:'auto',vertex:{module:this.blitDepthShaderModule,entryPoint:'vertexMain'},fragment:{module:this.blitDepthShaderModule,entryPoint:'fragmentMain',targets:[]},depthStencil:{format:t,depthWriteEnabled:!0,depthCompare:'always'},primitive:{topology:'triangle-list'}}),this.blitDepthPipelines[t]=a);const c=e.createView({aspect:'depth-only'}),p=a.getBindGroupLayout(0),d=this.device.createBindGroup({layout:p,entries:[{binding:0,resource:this.pointSampler},{binding:1,resource:c}]}),u=this.device.createCommandEncoder(),l={colorAttachments:[],depthStencilAttachment:{view:n.createView(),depthLoadOp:'clear',depthStoreOp:'store',depthClearValue:0,depthReadOnly:!1}},h=u.beginRenderPass(l);return h.setPipeline(a),h.setBindGroup(0,d),h.draw(3),h.end(),this.device.queue.submit([u.finish()]),n}copyMultisampledTexture(e){const t=e.width,r=e.height,s=e.format,o=e.usage|GPUTextureUsage.RENDER_TARGET|GPUTextureUsage.COPY_SRC,i=[t,r,1],n=this.device.createTexture({format:s,size:i,usage:o});return this.blitTexture(e.createView(),e.sampleCount,n.createView(),s),n}blitTexture(e,t,r,s,o){const i='unfilterable-float',n=`${i}#${t}`;if(!this.bindGroupLayouts.has(n)){const e=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:'non-filtering'}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:i,multisampled:t>1}}]});this.bindGroupLayouts.set(n,e);const r=this.device.createPipelineLayout({bindGroupLayouts:[e,this.displayBingGroupLayout]});this.pipelineLayouts.set(n,r)}const a=this.bindGroupLayouts.get(n),c=this.pipelineLayouts.get(n),p=`${s}#${i}#${t}`;let d=this.blitPipelines[p];if(!d){const e=t>1?this.multisampleBlitShaderModule:this.blitShaderModule;d=this.device.createRenderPipeline({layout:c,vertex:{module:e,entryPoint:'vertexMain'},fragment:{module:e,entryPoint:'fragmentMain',targets:[{format:s}]},primitive:{topology:'triangle-list'}}),this.blitPipelines[p]=d}const u=this.device.createBindGroup({layout:a,entries:[{binding:0,resource:this.pointSampler},{binding:1,resource:e}]}),l=this.device.createCommandEncoder(),h={colorAttachments:[{view:r,loadOp:'clear',storeOp:'store'}]};o?this.device.queue.writeBuffer(this.displayUniformBuffer,0,new Float32Array([o.exposure,o.channels])):this.device.queue.writeBuffer(this.displayUniformBuffer,0,new Float32Array([1,0]));const _=l.beginRenderPass(h);_.setPipeline(d),_.setBindGroup(0,u),_.setBindGroup(1,this.displayBindGroup),_.draw(3),_.end(),this.device.queue.submit([l.finish()])}}a.blitShader='\n  var<private> posTex:array<vec4f, 3> = array<vec4f, 3>(\n    vec4f(-1.0, 1.0, 0.0, 0.0),\n    vec4f(3.0, 1.0, 2.0, 0.0),\n    vec4f(-1.0, -3.0, 0.0, 2.0));\n  struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) uv: vec2f\n  };\n  @vertex\n  fn vertexMain(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {\n    var output: VertexOutput;\n    output.uv = posTex[vertexIndex].zw;\n    output.position = vec4f(posTex[vertexIndex].xy, 0.0, 1.0);\n    return output;;\n  }\n  @group(0) @binding(0) var texSampler: sampler;\n  @group(0) @binding(1) var texture: texture_2d<f32>;\n  struct Display {\n    exposure: f32,\n    channels: f32\n  };\n  @group(1) @binding(0) var<uniform> display: Display; \n  @fragment\n  fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n    var color = textureSample(texture, texSampler, input.uv);\n    if (display.channels == 1.0) { // R\n      var rgb = color.rgb * display.exposure;\n      return vec4f(rgb.r, 0.0, 0.0, 1);\n    } else if (display.channels == 2.0) { // G\n      var rgb = color.rgb * display.exposure;\n      return vec4f(0.0, rgb.g, 0.0, 1);\n    } else if (display.channels == 3.0) { // B\n      var rgb = color.rgb * display.exposure;\n      return vec4f(0.0, 0.0, rgb.b, 1);\n    } else if (display.channels == 4.0) { // A\n      var a = color.a * display.exposure;\n      return vec4f(a, a, a, 1);\n    } else if (display.channels == 5.0) { // Luminance\n      var luminance = dot(color.rgb, vec3f(0.2126, 0.7152, 0.0722));\n      var rgb = vec3f(luminance) * display.exposure;\n      return vec4f(rgb, 1);\n    }\n\n    // RGB\n    var rgb = color.rgb * display.exposure;\n    return vec4f(rgb, 1);\n  }\n',a.multisampleBlitShader='\n  var<private> posTex:array<vec4f, 3> = array<vec4f, 3>(\n    vec4f(-1.0, 1.0, 0.0, 0.0),\n    vec4f(3.0, 1.0, 2.0, 0.0),\n    vec4f(-1.0, -3.0, 0.0, 2.0));\n  struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) uv: vec2f\n  };\n  @vertex\n  fn vertexMain(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {\n    var output: VertexOutput;\n    output.uv = posTex[vertexIndex].zw;\n    output.position = vec4f(posTex[vertexIndex].xy, 0.0, 1.0);\n    return output;;\n  }\n  @group(0) @binding(0) var texSampler: sampler;\n  @group(0) @binding(1) var texture: texture_multisampled_2d<f32>;\n  struct Display {\n    exposure: f32,\n    channels: f32\n  };\n  @group(1) @binding(0) var<uniform> display: Display; \n  @fragment\n  fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n    var coords = vec2i(input.uv * vec2f(textureDimensions(texture)));\n    var color = textureLoad(texture, coords, 0);\n    if (display.channels == 1.0) { // R\n      var rgb = color.rgb * display.exposure;\n      return vec4f(rgb.r, 0.0, 0.0, color.a);\n    } else if (display.channels == 2.0) { // G\n      var rgb = color.rgb * display.exposure;\n      return vec4f(0.0, rgb.g, 0.0, color.a);\n    } else if (display.channels == 3.0) { // B\n      var rgb = color.rgb * display.exposure;\n      return vec4f(0.0, 0.0, rgb.b, color.a);\n    } else if (display.channels == 4.0) { // A\n      var a = color.a * display.exposure;\n      return vec4f(a, a, a, color.a);\n    } else if (display.channels == 5.0) { // Luminance\n      var luminance = dot(color.rgb, vec3f(0.2126, 0.7152, 0.0722));\n      var rgb = vec3f(luminance) * display.exposure;\n      return vec4f(rgb, color.a);\n    }\n\n    // RGB\n    var rgb = color.rgb * display.exposure;\n    return vec4f(rgb, color.a);\n  }\n',a.blitDepthShader='\n  var<private> posTex:array<vec4f, 3> = array<vec4f, 3>(\n    vec4f(-1.0, 1.0, 0.0, 0.0),\n    vec4f(3.0, 1.0, 2.0, 0.0),\n    vec4f(-1.0, -3.0, 0.0, 2.0));\n  struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) uv: vec2f\n  };\n  @vertex\n  fn vertexMain(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {\n    var output: VertexOutput;\n    output.uv = posTex[vertexIndex].zw;\n    output.position = vec4f(posTex[vertexIndex].xy, 0.0, 1.0);\n    return output;;\n  }\n  @binding(0) @group(0) var texSampler: sampler;\n  @binding(1) @group(0) var texture: texture_depth_2d;\n  @fragment\n  fn fragmentMain(input: VertexOutput) -> @builtin(frag_depth) f32 {\n    return textureSample(texture, texSampler, input.uv);\n  }\n';const c={CaptureBufferData:'webgpu_inspect_capture_buffer_data',CaptureBuffers:'webgpu_inspect_capture_buffers',DeleteObjects:'webgpu_inspect_delete_objects',ValidationError:'webgpu_inspect_validation_error',MemoryLeakWarning:'webgpu_inspect_memory_leak_warning',DeltaTime:'webgpu_inspect_delta_time',CaptureFrameResults:'webgpu_inspect_capture_frame_results',CaptureFrameCommands:'webgpu_inspect_capture_frame_commands',ObjectSetLabel:'webgpu_inspect_object_set_label',AddObject:'webgpu_inspect_add_object',ResolveAsyncObject:'webgpu_inspect_resolve_async_object',DeleteObject:'webgpu_inspect_delete_object',CaptureTextureFrames:'webgpu_inspect_capture_texture_frames',CaptureTextureData:'webgpu_inspect_capture_texture_data',CaptureBufferData:'webgpu_inspect_capture_buffer_data',Recording:'webgpu_record_recording'};c.values=new Set(Object.values(c));const p='webgpu_inspect_request_texture',d='webgpu_inspect_compile_shader';(()=>{const t='WEBGPU_INSPECTOR_CAPTURE_FRAME',r=262144;new class o{constructor(){if(this._frameCommands=[],this._frameData=[],this._frameRenderPassCount=0,this._captureTextureViews=new Set,this._captureCommandEncoder=null,this._captureTexturedBuffers=[],this._currentFrame=null,this._frameIndex=0,this._initalized=!0,this._objectID=1,this._lastFrameTime=0,this._frameCommandCount=0,this._captureFrameRequest=!1,this._errorChecking=!0,this._trackedObjects=new Map,this._trackedObjectInfo=new Map,this._bindGroupCount=0,this._captureTextureRequest=new Map,this._captureCanvasTextureRequest=new Map,this._toDestroy=[],this._objectMap=new Map,this._captureBuffers=[],this._captureTempBuffers=[],this._mappedTextureBufferCount=0,this._encodingTextureChunkCount=0,this._mappedBufferCount=0,this._encodingBufferChunkCount=0,!window.navigator.gpu)return;const e=document.createElement('div');e.style='position: absolute; z-index: 1000000; margin-left: 10px; margin-top: 5px;',document.body.insertBefore(e,document.body.firstChild),this._inspectingStatus=document.createElement('div'),this._inspectingStatus.title='WebGPU Inspector Running',this._inspectingStatus.style='height: 10px; width: 10px; display: inline-block; margin-right: 5px; background-color: #ff0; border-radius: 50%; border: 1px solid #000; box-shadow: inset -4px -4px 4px -3px rgb(255,100,0), 2px 2px 3px rgba(0,0,0,0.8);',e.appendChild(this._inspectingStatus),this._inspectingStatusText=document.createElement('div'),this._inspectingStatusText.style='display: inline-block; font-size: 12pt;color: #070; text-shadow: #fff 1px 1px 1px;',e.appendChild(this._inspectingStatusText),this._gpuWrapper=new i(this);const t=this;this._gpuWrapper.onPromise.addListener(this._onAsyncPromise,this),this._gpuWrapper.onPromiseResolve.addListener(this._onAsyncResolve,this),this._gpuWrapper.onPreCall.addListener(this._preMethodCall,this),this._gpuWrapper.onPostCall.addListener(this._postMethodCall,this),this._garbageCollectectedObjects=[],this._garbageCollectionRegistry=new FinalizationRegistry((e=>{if(e>0){t._garbageCollectectedObjects.push(e);const r=t._trackedObjectInfo.get(e),s=t._trackedObjects.get(e)?.deref();r&&(r===GPUBindGroup&&t._bindGroupCount--,r!==GPUBuffer&&s!==GPUTexture&&s!==GPUDevice||t._memoryLeakWarning(e)),t._garbageCollectectedObjects.length>100&&(window.postMessage({action:c.DeleteObjects,idList:t._garbageCollectectedObjects},'*'),t._garbageCollectectedObjects.length=0)}e>0&&(t._trackedObjects.delete(e),t._trackedObjectInfo.delete(e),t._captureTextureRequest.delete(e),t._captureCanvasTextureRequest.delete(e),t._objectMap.delete(e))}));setInterval((()=>{t._garbageCollectectedObjects.length>0&&(window.postMessage({action:c.DeleteObjects,idList:t._garbageCollectectedObjects},'*'),t._garbageCollectectedObjects.length=0)}),200);const r=document.getElementsByTagName('canvas');for(const e of r)this._wrapCanvas(e);const s=document.createElement;document.createElement=e=>{const r=s.call(document,e);return'canvas'===e&&t._wrapCanvas(r),r};const o=window.requestAnimationFrame;window.requestAnimationFrame=e=>{o((function(){const r=performance.now();t._frameStart(r),e(r),t._frameEnd()}))},window.addEventListener('message',(e=>{if(e.source!==window)return;const r=e.data;if('object'==typeof r&&null!==r)if(r.action===p){const e=r.id;t._requestTexture(e)}else if(r.action===d){const e=r.id,s=r.code;t._compileShader(e,s)}}))}disableRecording(){this._gpuWrapper.disableRecording()}enableRecording(){this._gpuWrapper.enableRecording()}_updateCanvasAttachment(e){let t=null;e.resolveTarget?t=e.resolveTarget:e.view&&(t=e.view);const r=t?.__texture,s=r?.__context;if(!s)return;s.__captureTexture&&(s.__captureTexture.width==r.width&&s.__captureTexture.height==r.height&&s.__captureTexture.format==r.format||(this.disableRecording(),s.__captureTexture.destroy(),s.__captureTexture=null,this.enableRecording()));const o=s.__device;if(o){this.disableRecording();const i=o.createTexture({size:[r.width,r.height,1],format:r.format,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC});if(s.__captureTexture=i,i){i.__id=r.__id,i.__canvasTexture=r,i.__context=s;const o=i.createView();o.__texture=i,o.__canvasView=t,i.__view=o,o.__context=s,e.resolveTarget?e.resolveTarget=o:e.view=o}this.enableRecording()}}_preMethodCall(e,t,r){const s=this;if('setPipeline'===t){let e=r[0];const t=this._objectMap.get(e.__id);t&&t.replacement&&(r[0]=t.replacement)}if('createTexture'===t&&(r[0].usage|=GPUTextureUsage.COPY_SRC),'createBuffer'===t&&(r[0].usage&GPUBufferUsage.MAP_READ||(r[0].usage|=GPUBufferUsage.COPY_SRC)),'createShaderModule'!==t&&'createRenderPipeline'!==t&&'createComputePipeline'!==t&&'createBindGroup'!==t||this._errorChecking&&(this._gpuWrapper.disableRecording(),e.pushErrorScope('validation'),this._gpuWrapper.enableRecording()),'beginRenderPass'===t&&this._errorChecking&&(this.disableRecording(),e.__device&&e.__device.pushErrorScope('validation'),this.enableRecording()),'finish'===t&&(e.__rendersToCanvas&&s._captureCanvasTextureRequest.size&&(s.disableRecording(),s._captureCanvasTextureRequest.forEach(((t,r)=>{t=s._trackedObjects.get(r)?.deref(),s._captureTextureBuffer(e,t)})),s._captureCanvasTextureRequest.clear(),s.enableRecording()),this._captureTextureRequest.size>0&&this._captureTextureBuffers(e)),e instanceof GPUCanvasContext&&'configure'===t){const t=r[0];t.usage?t.usage|=GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC:t.usage=GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,e.__device=t.device}'submit'===t&&e.onSubmittedWorkDone().then((()=>{s.disableRecording(),s._captureTempBuffers.length&&s._sendCapturedBuffers(),s._captureTexturedBuffers.length&&s._sendCaptureTextureBuffers();for(const e of s._toDestroy)e.destroy();s._toDestroy.length=0,s.enableRecording()}))}_postMethodCall(e,t,r,o,i){if(this._frameCommandCount++,'beginRenderPass'===t){o.__commandEncoder=e;for(const t of r[0].colorAttachments){const r=t.resolveTarget??t.view;if(r&&r.__id<0){e.__rendersToCanvas=!0;break}}}if('createShaderModule'!==t&&'createRenderPipeline'!==t&&'createComputePipeline'!==t&&'createBindGroup'!==t||this._errorChecking&&(this.disableRecording(),e.popErrorScope().then((e=>{if(e){const t=o?.__id??0;window.postMessage({action:c.ValidationError,id:t,message:e.message,stacktrace:i},'*')}})),this.enableRecording()),'end'===t&&this._errorChecking){this.disableRecording();const t=e.__device;t&&t.popErrorScope().then((e=>{e&&window.postMessage({action:c.ValidationError,message:e.message,stacktrace:i},'*')})),this.enableRecording()}let n;'getCurrentTexture'===t?(e.__id||(this._wrapObject(e),this._trackObject(e.__id,e)),n=-e.__id,e.__canvasTexture=new WeakRef(o)):'createView'===t&&e.__id<0&&(n=e.__id-.5),e instanceof GPUDevice&&void 0===e?.__id&&(this._wrapDevice(null,e),e.__adapter||navigator.gpu.requestAdapter().then((t=>{e.__adapter=t}))),o&&(s.has(o.constructor)&&this._wrapObject(o,n),'createShaderModule'===t||'createRenderPipeline'===t?(o.__descriptor=r[0],o.__device=e,this._objectMap.set(o.__id,{id:o.__id,object:new WeakRef(o),replacement:null})):'getCurrentTexture'===t?(o.__context=e,this._trackObject(o.__id,o)):'createTexture'===t?this._trackObject(o.__id,o):'createView'!==t||n?('createBuffer'===t||'createBindGroup'===t)&&this._trackObject(o.__id,o):(this._trackObject(o.__id,o),o.__texture=e)),this._recordCommand(e,t,o,r,i)}_onAsyncPromise(e,t,r,s,o){switch(t){case'createRenderPipelineAsync':this._sendAddObjectMessage(s,e.__id,'RenderPipeline',this._stringifyDescriptor(r[0]),o,!0);break;case'createComputePipelineAsync':this._sendAddObjectMessage(s,e.__id,'ComputePipeline',this._stringifyDescriptor(r[0]),o,!0)}}_onAsyncResolve(e,t,r,s,o,i){if('requestAdapter'===t){o&&this._wrapAdapter(o,s,i)}else if('requestDevice'===t){const t=e,n=o;n&&this._wrapDevice(t,n,s,r,i)}else o&&(this._wrapObject(o,s),window.postMessage({action:c.ResolveAsyncObject,id:o.__id}))}_wrapAdapter(e,t,r){this._wrapObject(e,t),t??=e.__id;const s=this;e.requestAdapterInfo().then((o=>{const i={vendor:o.vendor,architecture:o.architecture,device:o.device,description:o.description,features:s._gpuToArray(e.features),limits:s._gpuToObject(e.limits),isFallbackAdapter:e.isFallbackAdapter,wgslFeatures:s._gpuToArray(navigator.gpu.wgslLanguageFeatures)};s._sendAddObjectMessage(t,0,'Adapter',JSON.stringify(i),r)}))}_wrapDevice(e,t,r,s,o){if(e&&void 0===e.__id&&this._wrapAdapter(e,void 0,o),t&&void 0===t.__id){t.queue.__device=t,s??=[],this._wrapObject(t,r);const i=s[0]??{},n=t.__id,a=e?.__id??0;i.features=this._gpuToArray(t.features),i.limits=this._gpuToObject(t.limits),this._trackObject(n,t),this._sendAddObjectMessage(r,a,'Device',JSON.stringify(i),o),t.__adapter=e}}clear(){this._frameCommands.length=0,this._currentFrame=null}getNextId(e){return e instanceof GPUCommandEncoder||e instanceof GPUComputePassEncoder||e instanceof GPURenderPassEncoder||e instanceof GPUCommandBuffer?0:this._objectID++}_memoryLeakWarning(e){const t=e.label??'',r=e.constructor.name,s=e.__id,o=`WebGPU ${r} ${s} ${t} was garbage collected without being explicitly destroyed. This is a memory leak.`;window.postMessage({action:c.MemoryLeakWarning,id:s,message:o},'*')}_isPrimitiveType(e){return!e||e.constructor===String||e.constructor===Number||e.constructor===Boolean}_isTypedArray(e){return e&&(e instanceof ArrayBuffer||e.buffer instanceof ArrayBuffer)}_isArray(e){return e&&e.constructor===Array}_duplicateArray(e,t){const r=new Array(e.length);for(let s=0,o=e.length;s<o;++s){const o=e[s];this._isPrimitiveType(o)?r[s]=o:void 0!==o.__id?r[s]=t?{__id:o.__id,__class:o.constructor.name}:o:this._isTypedArray(o)?r[s]=o:this._isArray(o)?r[s]=this._duplicateArray(o,t):r[s]=o instanceof Object?this._duplicateObject(o,t):o}return r}_duplicateObject(e,t){const r={};for(const s in e){const o=e[s];this._isPrimitiveType(o)?r[s]=o:void 0!==o.__id?r[s]=t?{__id:o.__id,__class:o.constructor.name}:o:this._isTypedArray(o)?r[s]=o:this._isArray(o)?r[s]=this._duplicateArray(o,t):r[s]=o instanceof Object?this._duplicateObject(o,t):o}return r}_compileShader(e,t){const r=this._objectMap.get(e);if(!r)return;const s=r.object?.deref();if(!s)return;const o=s.__device,i=this._duplicateObject(s.__descriptor);i.code=t,this.disableRecording(),this._errorChecking=!1,o.pushErrorScope('validation'),i.__replacement=e;const n=o.createShaderModule(i);o.popErrorScope().then((t=>{if(t){const r=e??0;window.postMessage({action:c.ValidationError,id:r,message:t.message},'*')}})),this._errorChecking=!0,this.enableRecording(),r.replacement=n;for(const e of this._objectMap.values()){const t=e.object.deref(),r=t instanceof GPURenderPipeline,i=t instanceof GPUComputePipeline;if(r||i){const i=t.__descriptor;let a=null;if(i.vertex?.module===s&&(a||(a=this._duplicateObject(i)),a.vertex.module=n),i.fragment?.module===s&&(a||(a=this._duplicateObject(i)),a.fragment.module=n),i.compute?.module===s&&(a||(a=this._duplicateObject(i)),a.compute.module=n),null!==a){this.disableRecording(),this._errorChecking=!1,a.__replacement=e.id,o.pushErrorScope('validation');const t=r?o.createRenderPipeline(a):o.createComputePipeline(a);o.popErrorScope().then((t=>{if(t){const r=e.id??0;window.postMessage({action:c.ValidationError,id:r,message:t.message},'*')}})),this._errorChecking=!0,this.enableRecording(),e.replacement=t}}}}_requestTexture(e){if(e<0)this._captureCanvasTextureRequest.set(e,null);else{const t=this._trackedObjects.get(e),r=t?.deref();r instanceof GPUTexture&&this._captureTextureRequest.set(e,r)}}_updateStatusMessage(){let e='';this._captureTexturedBuffers.length>0&&(e+=`Texture: ${this._captureTexturedBuffers.length}`),this._mappedTextureBufferCount>0&&(e+=`Pending Texture Reads: ${this._mappedTextureBufferCount}`),this._encodingTextureChunkCount>0&&(e+=`Pending Texture Encoding: ${this._encodingTextureChunkCount}`),this._captureBuffers.length>0&&(e+=`Buffers: ${this._captureBuffers.length}`),this._mappedBufferCount>0&&(e+=`Pending Buffer Reads: ${this._mappedBufferCount}`),this._encodingBufferChunkCount>0&&(e+=`Pending Buffer Encoding: ${this._encodingBufferChunkCount}`),e&&(e=`Capturing: ${e}`),this._inspectingStatusText.textContent=e}_frameStart(e){if(0==this._lastFrameTime)this._lastFrameTime=e;else{const t=e-this._lastFrameTime;window.postMessage({action:c.DeltaTime,deltaTime:t},'*'),this._lastFrameTime=e}const r=sessionStorage.getItem(t);if(r){let e=null;try{e=JSON.parse(r)}catch(t){e=null}sessionStorage.removeItem(t),this._captureMaxBufferSize=e.maxBufferSize||262144,this._captureFrameRequest=!0,this._gpuWrapper.recordStacktraces=!0}this._frameData.length=0,this._frameCommands.length=0,this._frameRenderPassCount=0,this._frameIndex++,this._frameCommandCount=0}_frameEnd(){if(this._frameCommands.length){const e=2e3,t=Math.ceil(this._frameCommands.length/e);window.postMessage({action:c.CaptureFrameResults,frame:this._frameIndex,count:this._frameCommands.length,batches:t},'*');for(let t=0;t<this._frameCommands.length;t+=e){const r=Math.min(e,this._frameCommands.length-t),s=this._frameCommands.slice(t,t+r);window.postMessage({action:c.CaptureFrameCommands,frame:this._frameIndex,commands:s,index:t,count:r},'*')}this._frameCommands.length=0,this._captureFrameRequest=!1,this._gpuWrapper.recordStacktraces=!1}this._updateStatusMessage()}_trackObject(e,t){this._trackedObjects.set(e,new WeakRef(t)),this._trackedObjectInfo.set(e,t.constructor)}_wrapCanvas(e){if(e.__id)return;e.__id=this.getNextId(e),this._trackObject(e.__id,e);const t=this,r=e.getContext;e.getContext=(s,o)=>{const i=r.call(e,s,o);return i instanceof GPUCanvasContext&&(t._wrapObject(i),t._trackObject(i.__id,i)),i}}_wrapObject(e,t){if(e&&void 0===e.__id){if(e.__id=t??this.getNextId(e),this._garbageCollectionRegistry.register(e,e.__id),void 0!==e.label){const t=e.label;e._label=t,Object.defineProperty(e,'label',{enumerable:!0,configurable:!0,get(){return this._label},set(e){if(e!==this._label){this._label=e;const t=this.__id;window.postMessage({action:c.ObjectSetLabel,id:t,label:e},'*')}}})}e instanceof GPUDevice&&void 0===e.queue.__id&&this._wrapObject(e.queue)}}_captureTextureBuffers(e){const t=this;this._captureTextureRequest.forEach((r=>{t._captureTextureBuffer(e,r)})),this._captureTextureRequest.clear()}_gpuToArray(e){const t=[];if(e)for(const r of e)t.push(r);return t}_gpuToObject(e){const t={};if(e)for(const r in e)t[r]=e[r];return t}_stringifyDescriptor(e){const t=this._duplicateObject(e,!0)??{};return JSON.stringify(t)}_sendAddObjectMessage(e,t,r,s,o,i){window.postMessage({action:c.AddObject,id:e,parent:t,type:r,descriptor:s,stacktrace:o,pending:i},'*')}_recordCommand(e,t,r,s,o){const i=e?.__id??0;if('destroy'===t){const t=e.__id;t>0&&(this._trackedObjects.delete(t),this._trackedObjectInfo.delete(t),this._objectMap.delete(t)),e instanceof GPUBindGroup&&this._bindGroupCount--,t>=0&&(this._captureTextureRequest.delete(t),window.postMessage({action:c.DeleteObject,id:t},'*'))}else if('createShaderModule'===t){const e=r.__id;s[0].__replacement||this._sendAddObjectMessage(e,i,'ShaderModule',this._stringifyDescriptor(s[0]),o)}else if('createBuffer'===t){const e=r.__id;this._sendAddObjectMessage(e,i,'Buffer',this._stringifyDescriptor(s[0]),o)}else if('createTexture'===t){const t=r.__id;this._sendAddObjectMessage(t,i,'Texture',this._stringifyDescriptor(s[0]),o),r.__device=e}else if('getCurrentTexture'===t){const e=r.__id;if(r){const t={size:[r.width,r.height,r.depthOrArrayLayers],mipLevelCount:r.mipLevelCount,sampleCount:r.sampleCount,dimension:r.dimension,format:r.format,usage:r.usage},s=JSON.stringify(t);this._sendAddObjectMessage(e,i,'Texture',s,o)}}else if('createView'===t){const t=r.__id;r.__texture=e,this._sendAddObjectMessage(t,i,'TextureView',this._stringifyDescriptor(s[0]),o)}else if('createSampler'===t){const e=r.__id;this._sendAddObjectMessage(e,i,'Sampler',this._stringifyDescriptor(s[0]),o)}else if('createBindGroup'===t){this._bindGroupCount++;const e=r.__id;r.__descriptor=s[0],this._sendAddObjectMessage(e,i,'BindGroup',this._stringifyDescriptor(s[0]),o)}else if('createBindGroupLayout'===t){const e=r.__id;r.__descriptor=s[0],this._sendAddObjectMessage(e,i,'BindGroupLayout',this._stringifyDescriptor(s[0]),o)}else if('createPipelineLayout'===t){const e=r.__id;this._sendAddObjectMessage(e,i,'PipelineLayout',this._stringifyDescriptor(s[0]),o)}else if('createRenderPipeline'===t){const e=r.__id;s[0].__replacement||(this._sendAddObjectMessage(e,i,'RenderPipeline',this._stringifyDescriptor(s[0]),o),s[0].vertex?.module&&(r.__vertexModule=s[0].vertex?.module),s[0].fragment?.module&&(r.__fragmentModule=s[0].fragment?.module))}else if('createComputePipeline'===t){const e=r.__id;s[0].__replacement||(this._sendAddObjectMessage(e,i,'ComputePipeline',this._stringifyDescriptor(s[0]),o),s[0].compute?.module&&(r.__computeModule=s[0].compute?.module))}else'createCommandEncoder'===t?r.__device=e:'beginRenderPass'===t&&this._frameRenderPassCount++;this._captureFrameRequest&&this._captureCommand(e,t,s,o)}_captureCommand(e,t,r,s){const o=this._frameCommands.length,i=r;1===i.length&&void 0===i[0]&&(i.length=0);let n=null;if('setBindGroup'===t){n=[];const e=i[0],t=i[1];if(n.push(e),n.push(t),i.length>2){const e=i[2];if(e.length>0)if(e instanceof Uint32Array){const t=i[3],r=i[4];if(r>0){const s=new Uint32Array(e.buffer,4*t,r);n.push(s)}}else n.push(e)}const r=n.length>2?n[2]:null;let s=0;const a=t.__descriptor,c=a.layout?.__descriptor;if(a)for(const e in a.entries){const t=a.entries[e],i=c?.entries[e],n=t?.resource?.buffer,p=i?.buffer?.hasDynamicOffset??!1;if(n){let i=t.resource.offset??0;const a=t.resource.size??n.size;a<this._captureMaxBufferSize&&(p&&(i=r[s++]),this._captureBuffers.push({commandId:o,entryIndex:e,buffer:n,offset:i,size:a}),this._updateStatusMessage())}}}else if('writeBuffer'===t){n=[];const e=i[0],t=i[1];n.push(e),n.push(t);let r=i[2];if(i.length>3){const e=i[3]??0,t=i[4],s=r instanceof ArrayBuffer?r:r.buffer;s&&(t>0?r=new Uint8Array(s,e,t):e>0&&(r=new Uint8Array(s,e)))}n.push(r)}else n=i;if(n=this._processCommandArgs(n),this._frameCommands.push({class:e.constructor.name,id:e.__id,commandId:o,method:t,args:n,stacktrace:s}),'beginRenderPass'===t){if(r[0]?.colorAttachments?.length>0)for(const e of r[0].colorAttachments){const t=e.resolveTarget??e.view;this._captureTextureViews.add(t)}this._inComputePass=!1,this._captureCommandEncoder=e}else if('beginComputePass'===t)this._captureCommandEncoder=e,this._inComputePass=!0;else if('end'===t){if(this._inComputePass=!1,this._captureBuffers.length>0&&(this._recordCaptureBuffers(this._captureCommandEncoder),this._updateStatusMessage()),this._captureTextureViews.size>0){let e=10*(this._frameRenderPassCount-1);for(const t of this._captureTextureViews){const r=t.__texture;r&&this._captureTextureBuffer(this._captureCommandEncoder,r,e++)}this._captureTextureViews.clear()}this._captureCommandEncoder=null}}_sendCaptureTextureBuffers(){const e=[];for(const t of this._captureTexturedBuffers)e.push(t.id);let t=0;for(const e of this._captureTexturedBuffers){const s=e.tempBuffer.size;t+=Math.ceil(s/r)}console.log('_sendCaptureTextureBuffers',t,this._captureTexturedBuffers.length),window.postMessage({action:c.CaptureTextureFrames,chunkCount:t,count:this._captureTexturedBuffers.length,textures:e},'*');for(const e of this._captureTexturedBuffers){const{id:t,tempBuffer:r,passId:s}=e;this._mappedTextureBufferCount++;const o=this;r.mapAsync(GPUMapMode.READ).then((()=>{o._mappedTextureBufferCount--,o._updateStatusMessage();const e=r.getMappedRange(),i=new Uint8Array(e);o._sendTextureData(t,s,i),r.destroy()}))}this._captureTexturedBuffers.length=0,this._updateStatusMessage()}_sendTextureData(t,s,o){const i=o.length,n=Math.ceil(i/r),a=this;for(let p=0;p<n;++p){const d=p*r,u=Math.min(r,i-d),l=o.slice(d,d+u);this._encodingTextureChunkCount++,this._updateStatusMessage(),e(l).then((e=>{window.postMessage({action:c.CaptureTextureData,id:t,passId:s,offset:d,size:i,index:p,count:n,chunk:e},'*'),a._encodingTextureChunkCount--,a._updateStatusMessage()}))}}_getTextureUtils(e){return e?(e.__textureUtils||(e.__textureUtils=new a(e)),e.__textureUtils):null}_sendBufferData(t,s,o){const i=o.length,n=Math.ceil(i/r),a=this;for(let p=0;p<n;++p){const d=p*r,u=Math.min(r,i-d),l=o.slice(d,d+u);this._encodingBufferChunkCount++,this._updateStatusMessage(),e(l).then((e=>{window.postMessage({action:c.CaptureBufferData,commandId:t,entryIndex:s,offset:d,size:i,index:p,count:n,chunk:e},'*'),a._encodingBufferChunkCount--,a._updateStatusMessage()}))}}_sendCapturedBuffers(){const e=this._captureTempBuffers;if(e.length>0){let t=0;for(const s of e){const e=s.tempBuffer.size;t+=Math.ceil(e/r)}window.postMessage({action:c.CaptureBuffers,count:e.length,chunkCount:t},'*')}for(const t of e){const e=t.tempBuffer,r=t.commandId,s=t.entryIndex,o=this;this._mappedBufferCount++,this._updateStatusMessage(),e.mapAsync(GPUMapMode.READ).then((()=>{o._mappedBufferCount--,o._updateStatusMessage();const t=e.getMappedRange(),i=new Uint8Array(t);o._sendBufferData(r,s,i),e.destroy()}))}this._captureTempBuffers.length=0}_recordCaptureBuffers(e){const t=this._captureBuffers,r=e?.__device;if(r){for(const s of t){const{commandId:t,entryIndex:o,buffer:i,offset:n,size:a}=s;let c=null;this.disableRecording();try{c=r.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:`BUFFER CAPTURE TEMP [${t},${o}]`}),e.copyBufferToBuffer(i,n,c,0,a),this._captureTempBuffers.push({commandId:t,entryIndex:o,tempBuffer:c})}catch(e){console.log(e)}this.enableRecording()}t.length=0}else t.length=0}_captureTextureBuffer(e,t,r){const s=e?.__device;if(!s)return;r??=-1;const o=t.__id;let i=t.format,a=i?n[i]:void 0;if(!a)return;if('depth24plus'===i||'depth24plus-stencil8'===i){this.disableRecording();try{t=this._getTextureUtils(s).copyDepthTexture(t,'depth24plus-stencil8'===i?'depth32float':'depth32float-stencil8')}catch(e){return this.enableRecording(),void console.log(e)}this.enableRecording(),i=t.format,a=i?n[i]:void 0,t.__id=o,this._toDestroy.push(t)}else if(t.sampleCount>1){this.disableRecording();try{(t=this._getTextureUtils(s).copyMultisampledTexture(t)).__id=o,this._toDestroy.push(t)}catch(e){return this.enableRecording(),void console.log(e)}this.enableRecording()}const c=t.width,p=t.height||1,d=t.depthOrArrayLayers||1,u=c*a.bytesPerBlock+255&-256,l=u*p*d;if(!l)return;const h={width:c,height:p,depthOrArrayLayers:d};let _=null;try{this.disableRecording(),_=s.createBuffer({size:l,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});const r='depth24plus-stencil8'===i||'depth32float-stencil8'===i?'depth-only':'all';e.copyTextureToBuffer({texture:t,aspect:r},{buffer:_,bytesPerRow:u,rowsPerImage:p},h)}catch(e){console.log(e)}this.enableRecording(),_&&(this._captureTexturedBuffers.push({id:o,tempBuffer:_,width:c,height:p,depthOrArrayLayers:d,format:i,passId:r}),this._updateStatusMessage())}_addCommandData(e){if(this._captureFrameRequest){const t=this._frameData.length;return this._frameData.push(e),t}return-1}_processCommandArgs(e){if(!e||e.constructor===Number||e.constructor===String||e.constructor===Boolean)return e;if(void 0!==e.__id)return{__id:e.__id,__class:e.constructor.name};if(e instanceof ImageBitmap||e instanceof ImageData||e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof HTMLVideoElement||e instanceof OffscreenCanvas||e instanceof VideoFrame)return`@-1 ${e.constructor.name} ${e.width} ${e.height}`;if(e instanceof Array||void 0!==e.buffer){const t=100;if(e.length>t){return`@${this._addCommandData(e)} ${e.constructor.name} ${e.byteLength}`}const r=[];for(const t in e)r[t]=this._processCommandArgs(e[t]);return r}if(e instanceof ArrayBuffer){return`@${this._addCommandData(e)} ${e.constructor.name} ${e.byteLength}`}if(e instanceof Object){const t={};for(const r in e)t[r]=this._processCommandArgs(e[r]);return t}return e}}})()}();
//# sourceMappingURL=webgpu_inspector.js.map
