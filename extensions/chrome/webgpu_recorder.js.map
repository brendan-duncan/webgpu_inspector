{"version":3,"file":"webgpu_recorder.js","sources":["../../src/webgpu_recorder.js"],"sourcesContent":["class WebGPURecorder {\r\n  // public:\r\n  constructor(options) {\r\n    options = options || {};\r\n    this.config = {\r\n      maxFrameCount: Math.max((options.frames ?? 100) - 1, 1),\r\n      exportName: options.export || \"WebGPURecord\",\r\n      canvasWidth: options.width || 800,\r\n      canvasHeight: options.height || 600,\r\n      removeUnusedResources: !!options.removeUnusedResources,\r\n      messageRecording: !!options.messageRecording\r\n    };\r\n\r\n    this._objectIndex = 1;\r\n    this._initalized = false;\r\n    this._initializeCommands = [];\r\n    this._frameCommands = [];\r\n    this._frameObjects = [];\r\n    this._currentFrameCommands = null;\r\n    this._currentFrameObjects = null;\r\n    this._frameIndex = -1;\r\n    this._isRecording = false;\r\n    this._frameVariables = {};\r\n    this._arrayCache = [];\r\n    this._totalData = 0;\r\n    this._isRecording = true;\r\n    this._initalized = true;\r\n    this._initializeObjects = [];\r\n    this._frameVariables[-1] = new Set();\r\n    this._adapter = null;\r\n    this._unusedTextures = new Set();\r\n    this._unusedTextureViews = new Map();\r\n    this._unusedBuffers = new Set();\r\n    this._dataCacheObjects = [];\r\n\r\n    // Check if the browser supports WebGPU\r\n    if (!navigator.gpu) {\r\n      return;\r\n    }\r\n\r\n    this._gpuWrapper = new GPUObjectWrapper(this);\r\n    this._gpuWrapper.onPromiseResolve = this._onAsyncResolve.bind(this);\r\n    this._gpuWrapper.onPreCall = this._preMethodCall.bind(this);\r\n    this._gpuWrapper.onPostCall = this._onMethodCall.bind(this);\r\n\r\n    this._registerObject(navigator.gpu);\r\n    this._recordLine(`${this._getObjectVariable(navigator.gpu)} = navigator.gpu;`, null);\r\n\r\n    this._wrapCanvases();\r\n\r\n    const self = this;\r\n\r\n    // Capture any dynamically created canvases\r\n    const __createElement = document.createElement;\r\n    document.createElement = function (type) {\r\n      const element = __createElement.call(document, type);\r\n      if (type == \"canvas\") {\r\n        self._wrapCanvas(element);\r\n      }\r\n      return element;\r\n    };\r\n\r\n    // Wrap requestAnimationFrame so it can keep track of per-frame recording and know when\r\n    // the maximum number of frames has been reached.\r\n    //\r\n    // It would be nice to be able to arbitrarily start/stop recording. To do this,\r\n    // we would need to keep track of things like shader creation/deletion that can happen\r\n    // at arbitrary frames prior to the start, for any objects used within that recorded\r\n    // duration.\r\n    const __requestAnimationFrame = window.requestAnimationFrame;\r\n    window.requestAnimationFrame = function (cb) {\r\n      function callback() {\r\n        self._frameStart();\r\n        cb(performance.now());\r\n        self._frameEnd();\r\n      }\r\n      __requestAnimationFrame(callback);\r\n    };\r\n  }\r\n\r\n  getNextId() {\r\n    return this._objectIndex++;\r\n  }\r\n\r\n  // private:\r\n  _frameStart() {\r\n    this._frameIndex++;\r\n    this._frameVariables[this._frameIndex] = new Set();\r\n    this._currentFrameCommands = [];\r\n    this._frameCommands.push(this._currentFrameCommands);\r\n    this._currentFrameObjects = [];\r\n    this._frameObjects.push(this._currentFrameObjects);\r\n  }\r\n\r\n  _frameEnd() {\r\n    if (this._frameIndex == this.config.maxFrameCount) {\r\n      this.generateOutput();\r\n    }\r\n  }\r\n\r\n  _removeUnusedCommands(objects, commands, unusedObjects) {\r\n    const l = objects.length;\r\n    for (let i = l - 1; i >= 0; --i) {\r\n      const object = objects[i];\r\n      if (!object) {\r\n        continue;\r\n      }\r\n      if (unusedObjects.has(object.__id)) {\r\n        commands[i] = \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  generateOutput() {\r\n    const unusedObjects = new Set();\r\n    this._isRecording = false;\r\n    if (this.config.removeUnusedResources) {\r\n      for (const object of this._unusedTextures) {\r\n        unusedObjects.add(object);\r\n      }\r\n      for (const [key, value] of this._unusedTextureViews) {\r\n        unusedObjects.add(key);\r\n      }\r\n      for (const object of this._unusedBuffers) {\r\n        unusedObjects.add(object);\r\n      }\r\n\r\n      this._removeUnusedCommands(this._initializeObjects, this._initializeCommands, unusedObjects);\r\n    }\r\n    this._initializeCommands = this._initializeCommands.filter((cmd) => cmd != \"\");\r\n    if (this.config.removeUnusedResources) {\r\n      for (const obj of unusedObjects) {\r\n        for (let di = 0, dl = this._dataCacheObjects.length; di < dl; ++di) {\r\n          let dataObj = this._dataCacheObjects[di];\r\n          if (dataObj) {\r\n            for (let li = dataObj.length - 1; li >= 0; --li) {\r\n              if (dataObj[li].__id == obj) {\r\n                dataObj.splice(li, 1);\r\n              }\r\n            }\r\n            if (dataObj.length == 0) {\r\n              this._arrayCache[di].length = 0;\r\n              this._arrayCache[di].type = \"Uint8Array\";\r\n              this._arrayCache[di].array = new Uint8Array(0);\r\n            }\r\n          }\r\n          /*if (dataObj && dataObj.__id == obj) {\r\n              this._arrayCache[di].length = 0;\r\n              this._arrayCache[di].type = \"Uint8Array\";\r\n              this._arrayCache[di].array = new Uint8Array(0);\r\n          }*/\r\n        }\r\n      }\r\n    }\r\n    let s =`\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <body style=\"text-align: center;\">\r\n            <canvas id=\"#webgpu\" width=${this.config.canvasWidth} height=${this.config.canvasHeight}></canvas>\r\n            <script>\r\n    let D = new Array(${this._arrayCache.length});\r\n    async function main() {\r\n      await loadData();\r\n\r\n      let canvas = document.getElementById(\"#webgpu\");\r\n      let context = canvas.getContext(\"webgpu\");\r\n      let frameLabel = document.createElement(\"div\");\r\n      frameLabel.style = \"position: absolute; top: 10px; left: 10px; font-size: 24pt; color: #f00;\";\r\n      document.body.append(frameLabel);\r\n      ${this._getVariableDeclarations(-1)}\r\n      ${this._initializeCommands.join(\"\\n  \")}\\n`;\r\n    for (let fi = 0, fl = this._frameCommands.length; fi < fl; ++fi) {\r\n      if (this.config.removeUnusedResources) {\r\n        this._removeUnusedCommands(this._frameObjects[fi], this._frameCommands[fi], unusedObjects);\r\n        this._frameCommands[fi] = this._frameCommands[fi].filter((cmd) => cmd != \"\");\r\n      }\r\n      s += `\r\n      async function f${fi}() {\r\n          ${this._getVariableDeclarations(fi)}\r\n          ${this._frameCommands[fi].join(\"\\n  \")}\r\n      }\\n`;\r\n    }\r\n    s += \"    let frames=[\";\r\n    for (let fi = 0, fl = this._frameCommands.length; fi < fl; ++fi) {\r\n      s += `f${fi},`;\r\n    }\r\n    s += \"];\";\r\n    s += `\r\n        let frame = 0;\r\n        let lastFrame = -1;\r\n        let t0 = performance.now();\r\n        async function renderFrame() {\r\n            if (frame > ${this._frameCommands.length - 1}) return;\r\n            requestAnimationFrame(renderFrame);\r\n            if (frame == lastFrame) return;\r\n            lastFrame = frame;\r\n            let t1 = performance.now();\r\n            frameLabel.innerText = \"F: \" + (frame + 1) + \"  T:\" + (t1 - t0).toFixed(2);\r\n            t0 = t1;\r\n            try {\r\n                await frames[frame]();\r\n            } catch (err) {\r\n                console.log(\"Error Frame:\", frame);\r\n                console.error(err);\r\n            }\r\n            frame++;\r\n        }\r\n        requestAnimationFrame(renderFrame);\r\n    }\r\n    \r\n    function setCanvasSize(canvas, width, height) {\r\n        if (canvas.width !== width || canvas.height !== height) {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n        }\r\n    }\r\n    \r\n    async function B64ToA(s, type, length) {\r\n        const res = await fetch(s);\r\n        const x = new Uint8Array(await res.arrayBuffer());\r\n        if (type == \"Uint32Array\")\r\n            return new Uint32Array(x.buffer, 0, x.length/4);\r\n        return new Uint8Array(x.buffer, 0, x.length);\r\n    }\r\n    \r\n    async function loadData() {\\n`;\r\n    let promises = [];\r\n    for (let ai = 0; ai < this._arrayCache.length; ++ai) {\r\n      let a = this._arrayCache[ai];\r\n      //let b64 = this._arrayToBase64(a.array);\r\n      promises.push(new Promise((resolve) => {\r\n        this._encodeDataUrl(a.array).then((b64) => {\r\n          s += `D[${ai}] = await B64ToA(\"${b64}\", \"${a.type}\", ${a.length});\\n`;\r\n          resolve();\r\n        });\r\n      }));\r\n    }\r\n\r\n    Promise.all(promises).then(() => {\r\n      s += `\r\n      }\r\n      main();\r\n              </script>\r\n          </body>\r\n      </html>\\n`;\r\n      this._downloadFile(s, (this.config.exportName || \"WebGpuRecord\") + \".html\");\r\n    });   \r\n  }\r\n\r\n  async _encodeDataUrl(a, type = \"application/octet-stream\") {\r\n    const bytes = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n    return await new Promise((resolve, reject) => {\r\n      const reader = Object.assign(new FileReader(), {\r\n        onload: () => resolve(reader.result),\r\n        onerror: () => reject(reader.error),\r\n      });\r\n      reader.readAsDataURL(new File([bytes], \"\", { type }));\r\n    });\r\n  }\r\n\r\n  _downloadFile(data, filename) {\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(new Blob([data], { type: \"text/html\" }));\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n    if (this.config.messageRecording) {\r\n      const maxMessageSize = 1024 * 1024; // Break message up into chunks\r\n      if (data.length <= maxMessageSize) {\r\n        window.postMessage({ \"action\": \"webgpu_record_recording\", data, \"index\": 0, \"count\": 1 });\r\n      } else {\r\n        let startIndex = 0;\r\n        const dataLength = data.length;\r\n        let messageIndex = 0;\r\n        let messageCount = Math.ceil(dataLength / maxMessageSize);\r\n        while (startIndex < dataLength) {\r\n          const remainder = dataLength - startIndex;\r\n          const size = remainder > maxMessageSize ? maxMessageSize : remainder;\r\n          const dataChunk = data.substr(startIndex, size);\r\n          window.postMessage({ \"action\": \"webgpu_record_recording\", \"data\": dataChunk, \"index\": messageIndex, \"count\": messageCount });\r\n          messageIndex++;\r\n          startIndex += size;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _wrapCanvas(c) {\r\n    if (c.__id) {\r\n      return;\r\n    }\r\n    this._registerObject(c);\r\n    let self = this;\r\n    let __getContext = c.getContext;\r\n    c.getContext = function (a1, a2) {\r\n      let ret = __getContext.call(c, a1, a2);\r\n      if (a1 == \"webgpu\") {\r\n        if (ret) {\r\n          self._wrapContext(ret);\r\n        }\r\n      }\r\n      return ret;\r\n    };\r\n  }\r\n\r\n  _wrapCanvases() {\r\n    const canvases = document.getElementsByTagName(\"canvas\");\r\n    for (let i = 0; i < canvases.length; ++i) {\r\n      const c = canvases[i];\r\n      this._wrapCanvas(c);\r\n    }\r\n  }\r\n\r\n  _registerObject(object) {\r\n    const id = this.getNextId(object);\r\n    object.__id = id;\r\n    object.__frame = this._frameIndex;\r\n  }\r\n\r\n  _isFrameVariable(frame, name) {\r\n    return this._frameVariables[frame] && this._frameVariables[frame].has(name);\r\n  }\r\n\r\n  _removeVariable(name) {\r\n    for (const f in this._frameVariables) {\r\n      const fs = this._frameVariables[f];\r\n      fs.delete(name);\r\n    }\r\n  }\r\n\r\n  _addVariable(frame, name) {\r\n    this._frameVariables[frame].add(name);\r\n  }\r\n\r\n  _getVariableDeclarations(frame) {\r\n    const s = this._frameVariables[frame];\r\n    if (!s.size) {\r\n      return \"\";\r\n    }\r\n    return `let ${[...s].join(\",\")};`;\r\n  }\r\n\r\n  _getObjectVariable(object) {\r\n    if (object instanceof GPUCanvasContext) {\r\n      return \"context\";\r\n    }\r\n\r\n    if (object.__id === undefined) {\r\n      this._registerObject(object);\r\n    }\r\n\r\n    const name = `x${object.constructor.name.replace(/^GPU/, \"\")}${(object.__id || 0)}`;\r\n\r\n    if (this._frameIndex != object.__frame) {\r\n      if (!this._isFrameVariable(-1, name)) {\r\n        this._removeVariable(name);\r\n        this._addVariable(-1, name);\r\n      }\r\n    } else {\r\n      this._addVariable(this._frameIndex, name);\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  _wrapContext(ctx) {\r\n    this._recordLine(`${this._getObjectVariable(ctx)} = canvas.getContext(\"webgpu\");`, null);\r\n  }\r\n\r\n  _getBytesFromImageSource(src) {\r\n    let canvas = document.createElement(\"canvas\");\r\n    canvas.width = src.width;\r\n    canvas.height = src.height;\r\n    let c2d = canvas.getContext(\"2d\");\r\n    c2d.drawImage(src, 0, 0);\r\n    let data = c2d.getImageData(0, 0, src.width, src.height);\r\n    return data.data;\r\n  }\r\n\r\n  _onAsyncResolve(object, method, args, id, result) {\r\n    if (method === \"requestDevice\") {\r\n      const adapter = object;\r\n      if (adapter.__id === undefined) {\r\n        this._recordCommand(true, navigator.gpu, \"requestAdapter\", adapter, []);\r\n      }\r\n    }\r\n\r\n    this._recordCommand(true, object, method, result, args);\r\n  }\r\n\r\n  _preMethodCall(object, method, args) {\r\n    // We can\"t track every change made to a mappedRange buffer since that all happens \r\n    // outside the scope of what WebGPU is in control of. So we keep track of all the\r\n    // mapped buffer ranges, and when unmap is called, we record the content of their data\r\n    // so that they have their correct data for the unmap.\r\n    if (method === \"unmap\") {\r\n      if (object.__mappedRanges) {\r\n        for (const buffer of object.__mappedRanges) {\r\n          // Make a copy of the mappedRange buffer data as it is when unmap\r\n          // is called.\r\n          const cacheIndex = this._getDataCache(buffer, 0, buffer.byteLength, buffer);\r\n          // Set the mappedRange buffer data in the recording to what is in the buffer\r\n          // at the time unmap is called.\r\n          this._recordLine(`new Uint8Array(${this._getObjectVariable(buffer)}).set(D[${cacheIndex}]);`, null);\r\n        }\r\n        delete object.__mappedRanges;\r\n      }\r\n    } else if (method === \"getCurrentTexture\") {\r\n      this._recordLine(`setCanvasSize(${this._getObjectVariable(object)}.canvas, ${object.canvas.width}, ${object.canvas.height})`, null);\r\n    }\r\n  }\r\n\r\n  _onMethodCall(object, method, args, result) {\r\n    if (method == \"copyExternalImageToTexture\") {\r\n      // copyExternalImageToTexture uses ImageBitmap (or canvas or offscreenCanvas) as\r\n      // its source, which we can\"t record. ConvertcopyExternalImageToTexture to\r\n      // writeTexture, and record the bytes from the ImageBitmap. To do that, we need\r\n      // to draw the ImageBitmap into a canvas, and record the bytes from that.\r\n      // A very heavy process, but not sure what else to do.\r\n      const bytes = this._getBytesFromImageSource(args[0].source);\r\n      const bytesPerPixel = 4;\r\n      const bytesPerRow = args[0].source.width * bytesPerPixel;\r\n      const texture = args[1][\"texture\"];\r\n      const cacheIndex = this._getDataCache(bytes, bytes.byteOffset, bytes.byteLength, texture);\r\n      this._recordLine(`${this._getObjectVariable(object)}.writeTexture(${this._stringifyObject(method, args[1])}, D[${cacheIndex}], {bytesPerRow:${bytesPerRow}}, ${this._stringifyObject(method, args[2])});`, object);\r\n    } else {\r\n      this._recordCommand(false, object, method, result, args);\r\n    }\r\n\r\n    if (method == \"getMappedRange\") {\r\n      // Keep track of the mapped ranges for the buffer object. The recording will set their\r\n      // data when unmap is called.\r\n      if (!object.__mappedRanges) {\r\n        object.__mappedRanges = [];\r\n      }\r\n      object.__mappedRanges.push(result);\r\n    } else if (method == \"submit\") {\r\n      // just to give the file some structure\r\n      this._recordLine(\"\", null);\r\n    }\r\n  }\r\n\r\n  _stringifyObject(method, object) {\r\n    let s = \"\";\r\n    let first = true;\r\n    for (let key in object) {\r\n      let value = object[key];\r\n      if (value === undefined) {\r\n        continue;\r\n      }\r\n      if (!first) {\r\n        s += \",\";\r\n      }\r\n      first = false;\r\n      s += `\"${key}\":`;\r\n      if (method == \"requestDevice\") {\r\n        if (key == \"requiredFeatures\") {\r\n          s += \"requiredFeatures\";\r\n          continue;\r\n        } else if (key == \"requiredLimits\") {\r\n          s += \"requiredLimits\";\r\n          continue;\r\n        }\r\n      }\r\n      if (method == \"createBindGroup\") {\r\n        if (key == \"resource\") {\r\n          if (this._unusedTextureViews.has(value.__id)) {\r\n            const texture = this._unusedTextureViews.get(value.__id);\r\n            this._unusedTextures.delete(texture);\r\n          }\r\n        }\r\n      } else if (method == \"beginRenderPass\") {\r\n        if (key == \"colorAttachments\") {\r\n          for (const desc of value) {\r\n            if (desc[\"view\"]) {\r\n              const view = desc[\"view\"];\r\n              if (this._unusedTextureViews.has(view.__id)) {\r\n                const texture = this._unusedTextureViews.get(view.__id);\r\n                this._unusedTextures.delete(texture);\r\n                this._unusedTextureViews.delete(view.__id);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (value === null) {\r\n        s += \"null\";\r\n      } else if (typeof (value) == \"string\") {\r\n        s += `\\`${value}\\``;\r\n      } else if (value.__id !== undefined) {\r\n        s += this._getObjectVariable(value);\r\n      } else if (value.__data !== undefined) {\r\n        s += `D[${value.__data}]`;\r\n      } else if (value.constructor == Array) {\r\n        s += this._stringifyArray(value);\r\n      } else if (typeof (value) == \"object\") {\r\n        s += this._stringifyObject(method, value);\r\n      } else {\r\n        s += `${value}`;\r\n      }\r\n    }\r\n    s = `{${s}}`;\r\n    return s;\r\n  }\r\n\r\n  _stringifyArray(a) {\r\n    let s = \"[\";\r\n    s += this._stringifyArgs(\"\", a);\r\n    s += \"]\";\r\n    return s;\r\n  }\r\n\r\n  _getDataCache(heap, offset, length, object) {\r\n    let self = this;\r\n\r\n    function _heapAccessShiftForWebGPUHeap(heap) {\r\n      if (!heap.BYTES_PER_ELEMENT) {\r\n        return 0;\r\n      }\r\n      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);\r\n    }\r\n\r\n    function _compareCacheData(ai, view) {\r\n      const a = self._arrayCache[ai].array;\r\n      if (a.length != view.length) {\r\n        return false;\r\n      }\r\n      for (let i = 0, l = a.length; i < l; ++i) {\r\n        if (a[i] != view[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    const byteOffset = (heap.byteOffset ?? 0) + ((offset ?? 0) << _heapAccessShiftForWebGPUHeap(heap));\r\n    const byteLength = length === undefined ? heap.byteLength : (length << _heapAccessShiftForWebGPUHeap(heap));\r\n\r\n    this._totalData += byteLength;\r\n    const view = new Uint8Array(heap.buffer ?? heap, byteOffset, byteLength);\r\n\r\n    let cacheIndex = -1;\r\n    for (let ai = 0; ai < self._arrayCache.length; ++ai) {\r\n      const c = self._arrayCache[ai];\r\n      if (c.length == length) {\r\n        if (_compareCacheData(ai, view)) {\r\n          cacheIndex = ai;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (cacheIndex == -1) {\r\n      cacheIndex = self._arrayCache.length;\r\n      const arrayCopy = Uint8Array.from(view);\r\n      self._arrayCache.push({\r\n        length: byteLength,\r\n        type: heap.constructor === \"ArrayBuffer\" ? Uint8Array : heap.constructor.name,\r\n        array: arrayCopy\r\n      });\r\n    }\r\n\r\n    if (object) {\r\n      if (!this._dataCacheObjects[cacheIndex]) {\r\n        this._dataCacheObjects[cacheIndex] = [];\r\n      }\r\n      this._dataCacheObjects[cacheIndex].push(object);\r\n    }\r\n\r\n    return cacheIndex;\r\n  }\r\n\r\n  _stringifyArgs(method, args) {\r\n    if (args.length == 0 || (args.length == 1 && args[0] === undefined)) {\r\n      return \"\";\r\n    }\r\n\r\n    args = [...args];\r\n\r\n    // In order to capture buffer data, we need to know the offset and size of the data,\r\n    // which are arguments of specific methods. So we need to special case those methods to\r\n    // properly capture the buffer data passed to them.\r\n    if (method == \"writeBuffer\") {\r\n      const buffer = args[2];\r\n      const offset = args[3];\r\n      const size = args[4];\r\n      const cacheIndex = this._getDataCache(buffer, offset, size, buffer);\r\n      args[2] = { __data: cacheIndex };\r\n      args[3] = 0;\r\n    } else if (method == \"writeTexture\") {\r\n      const texture = args[0].texture;\r\n      const buffer = args[1];\r\n      const bytesPerRow = args[2].bytesPerRow;\r\n      const width = args[3].width || args[3][0];\r\n      const { blockWidth, blockHeight, bytesPerBlock } = WebGPURecorder._formatInfo[texture.format];\r\n      const widthInBlocks = width / blockWidth;\r\n      const rows = args[2].rowsPerImage || (args[3].height || args[3][1] || 1) / blockHeight;\r\n      const layers = args[3].depthOrArrayLayers || args[3][2] || 1;\r\n      const totalRows = rows * layers;\r\n      const size = totalRows > 0\r\n        ? bytesPerRow * (totalRows - 1) + widthInBlocks * bytesPerBlock\r\n        : 0;\r\n        const offset = args[2].offset;\r\n      // offset is in bytes but source can be any TypedArray\r\n      // getDataCache assumes offset is in TypedArray.BYTES_PER_ELEMENT size\r\n      // so view the data as bytes.\r\n      const cacheIndex = this._getDataCache(new Uint8Array(buffer.buffer || buffer, buffer.byteOffset, buffer.byteLength), offset, size, texture);\r\n      args[1] = { __data: cacheIndex };\r\n      args[2].offset = 0;\r\n    } else if (method == \"setBindGroup\") {\r\n      if (args.length == 5) {\r\n        const buffer = args[2];\r\n        const offset = args[3];\r\n        const size = args[4];\r\n        const offsets = this._getDataCache(buffer, offset, size, buffer);\r\n        args[2] = { __data: offsets };\r\n        args.length = 3;\r\n      } else if (args.length == 3) {\r\n        const buffer = args[2];\r\n        const offsets = this._getDataCache(buffer, 0, buffer.length, buffer);\r\n        args[2] = { __data: offsets };\r\n        args.length = 3;\r\n      }\r\n    } else if (method == \"createBindGroup\") {\r\n      if (args[0][\"entries\"]) {\r\n        const entries = args[0][\"entries\"];\r\n        for (const entry of entries) {\r\n          const value = entry[\"resource\"];\r\n          if (value && value.__id) {\r\n            if (this._unusedTextureViews.has(value.__id)) {\r\n              const texture = this._unusedTextureViews.get(value.__id);\r\n              this._unusedTextures.delete(texture);\r\n            }\r\n          } else if (value && value[\"buffer\"]) {\r\n            const buffer = value[\"buffer\"];\r\n            if (this._unusedBuffers.has(buffer.__id)) {\r\n              this._unusedBuffers.delete(buffer.__id);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (method == \"copyBufferToBuffer\") {\r\n      if (this._unusedBuffers.has(args[0].__id)) {\r\n        this._unusedBuffers.delete(args[0].__id);\r\n      }\r\n      if (this._unusedBuffers.has(args[2].__id)) {\r\n        this._unusedBuffers.delete(args[2].__id);\r\n      }\r\n    } else if (method == \"setVertexBuffer\") {\r\n      const buffer = args[1];\r\n      if (this._unusedBuffers.has(buffer.__id)) {\r\n        this._unusedBuffers.delete(buffer.__id);\r\n      }\r\n    } else if (method == \"setIndexBuffer\") {\r\n      const buffer = args[0];\r\n      if (this._unusedBuffers.has(buffer.__id)) {\r\n        this._unusedBuffers.delete(buffer.__id);\r\n      }\r\n    } else if (method == \"beginRenderPass\") {\r\n      if (args[0][\"colorAttachments\"]) {\r\n        const value = args[0][\"colorAttachments\"];\r\n        for (const desc of value) {\r\n          if (desc[\"view\"]) {\r\n            const view = desc[\"view\"];\r\n            if (this._unusedTextureViews.has(view.__id)) {\r\n              const texture = this._unusedTextureViews.get(view.__id);\r\n              this._unusedTextures.delete(texture);\r\n              this._unusedTextureViews.delete(view.__id);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (args[0][\"depthStencilAttachment\"]) {\r\n        const value = args[0][\"depthStencilAttachment\"];\r\n        if (value[\"view\"]) {\r\n          const view = value[\"view\"];\r\n          if (this._unusedTextureViews.has(view.__id)) {\r\n            const texture = this._unusedTextureViews.get(view.__id);\r\n            this._unusedTextures.delete(texture);\r\n            this._unusedTextureViews.delete(view.__id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const argStrings = [];\r\n    for (let a of args) {\r\n      if (a === undefined) {\r\n        argStrings.push(\"undefined\");\r\n      } else if (a === null) {\r\n        argStrings.push(\"null\");\r\n      } else if (a.__data !== undefined) {\r\n        argStrings.push(`D[${a.__data}]`); // This is a captured data buffer.\r\n      } else if (a.__id) {\r\n        argStrings.push(this._getObjectVariable(a));\r\n      } else if (a.constructor === Array) {\r\n        argStrings.push(this._stringifyArray(a));\r\n      } else if (typeof (a) == \"object\") {\r\n        argStrings.push(this._stringifyObject(method, a));\r\n      } else if (typeof (a) == \"string\") {\r\n        argStrings.push(`\\`${a}\\``);\r\n      } else {\r\n        argStrings.push(a);\r\n      }\r\n    }\r\n    return argStrings.join();\r\n  }\r\n\r\n  _recordLine(line, object) {\r\n    if (this._isRecording) {\r\n      if (this._frameIndex == -1) {\r\n        this._initializeCommands.push(line);\r\n        this._initializeObjects.push(object);\r\n      } else {\r\n        this._currentFrameCommands.push(line);\r\n        this._currentFrameObjects.push(object);\r\n      }\r\n    }\r\n  }\r\n\r\n  _recordCommand(async, object, method, result, args) {\r\n    if (this._isRecording) {\r\n      if (result) {\r\n        if (typeof (result) === \"string\") {\r\n          return;\r\n        }\r\n\r\n        this._registerObject(result);\r\n      }\r\n\r\n      async = async ? \"await \" : \"\";\r\n\r\n      let obj = object;\r\n      const hasAdapter = !!this._adapter;\r\n\r\n      if (!hasAdapter && method == \"requestAdapter\") {\r\n        this._adapter = result;\r\n      } else if (method == \"createTexture\") {\r\n        this._unusedTextures.add(result.__id);\r\n        obj = result;\r\n      } else if (method == \"createView\") {\r\n        this._unusedTextureViews.set(result.__id, object.__id);\r\n      } else if (method == \"writeTexture\") {\r\n        obj = args[0].texture;\r\n      } else if (method == \"createBuffer\") {\r\n        this._unusedBuffers.add(result.__id);\r\n        obj = result;\r\n      } else if (method == \"writeBuffer\") {\r\n        obj = args[0];\r\n      }\r\n\r\n      // Add a blank line before render and compute passes to make them easier to\r\n      // identify in the recording file.\r\n      if (method == \"beginRenderPass\" || method == \"beginComputePass\") {\r\n        this._recordLine(\"\\n\", null);\r\n      }\r\n\r\n      if (result) {\r\n        this._recordLine(`${this._getObjectVariable(result)} = ${async}${this._getObjectVariable(object)}.${method}(${this._stringifyArgs(method, args)});`, obj);\r\n      } else {\r\n        this._recordLine(`${async}${this._getObjectVariable(object)}.${method}(${this._stringifyArgs(method, args)});`, obj);\r\n      }\r\n\r\n      // Add a blank line after ending render and compute passes to make them easier\r\n      // to identify in the recording file.\r\n      if (method == \"end\") {\r\n        this._recordLine(\"\\n\", null);\r\n      }\r\n\r\n      if (!hasAdapter && method == \"requestAdapter\") {\r\n        const adapter = this._getObjectVariable(result);\r\n        this._recordLine(`const requiredFeatures = [];\r\n          for (const x of ${adapter}.features) {\r\n              requiredFeatures.push(x);\r\n          }`, obj);\r\n        this._recordLine(`const requiredLimits = {};\r\n          const exclude = new Set([\"minSubgroupSize\", \"maxSubgroupSize\"]);\r\n          for (const x in ${adapter}.limits) {\r\n            if (!exclude.has(x)) {\r\n              requiredLimits[x] = ${adapter}.limits[x];\r\n            }\r\n          }`, obj);\r\n      }\r\n\r\n      if (result instanceof GPUDevice) {\r\n        const q = result.queue;\r\n        if (q.__id === undefined) {\r\n          this._recordLine(`${this._getObjectVariable(q)} = ${this._getObjectVariable(result)}.queue;`, result);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nWebGPURecorder._asyncMethods = new Set([\r\n  \"requestAdapter\",\r\n  \"requestDevice\",\r\n  \"createComputePipelineAsync\",\r\n  \"createRenderPipelineAsync\",\r\n  \"mapAsync\",\r\n]);\r\n\r\nWebGPURecorder._skipMethods = new Set([\r\n  \"toString\",\r\n  \"entries\",\r\n  \"getContext\",\r\n  \"forEach\",\r\n  \"has\",\r\n  \"keys\",\r\n  \"values\",\r\n  \"getPreferredFormat\",\r\n  \"requestAdapterInfo\",\r\n  \"pushErrorScope\",\r\n  \"popErrorScope\"\r\n]);\r\n\r\nWebGPURecorder._formatInfo = {\r\n  \"r8unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 1 },\r\n  \"r8snorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 1 },\r\n  \"r8uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 1 },\r\n  \"r8sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 1 },\r\n  \"rg8unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"rg8snorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"rg8uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"rg8sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"rgba8unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgba8unorm-srgb\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgba8snorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgba8uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgba8sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"bgra8unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"bgra8unorm-srgb\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"r16uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"r16sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"r16float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"rg16uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rg16sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rg16float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgba16uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"rgba16sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"rgba16float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"r32uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"r32sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"r32float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rg32uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"rg32sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"rg32float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 8 },\r\n  \"rgba32uint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 16 },\r\n  \"rgba32sint\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 16 },\r\n  \"rgba32float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 16 },\r\n  \"rgb10a2unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rg11b10ufloat\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"rgb9e5ufloat\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"stencil8\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 1 },\r\n  \"depth16unorm\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 2 },\r\n  \"depth32float\": { \"blockWidth\": 1, \"blockHeight\": 1, \"bytesPerBlock\": 4 },\r\n  \"depth24plus\": { \"blockWidth\": 1, \"blockHeight\": 1 },\r\n  \"depth24plus-stencil8\": { \"blockWidth\": 1, \"blockHeight\": 1 },\r\n  \"depth32float-stencil8\": { \"blockWidth\": 1, \"blockHeight\": 1 },\r\n  \"bc1-rgba-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"bc1-rgba-unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"bc2-rgba-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc2-rgba-unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc3-rgba-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc3-rgba-unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc4-r-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"bc4-r-snorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"bc5-rg-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc5-rg-snorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc6h-rgb-ufloat\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc6h-rgb-float\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc7-rgba-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"bc7-rgba-unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"etc2-rgb8unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"etc2-rgb8unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"etc2-rgb8a1unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"etc2-rgb8a1unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"etc2-rgba8unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"etc2-rgba8unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"eac-r11unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"eac-r11snorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 8 },\r\n  \"eac-rg11unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"eac-rg11snorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"astc-4x4-unorm\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"astc-4x4-unorm-srgb\": { \"blockWidth\": 4, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"astc-5x4-unorm\": { \"blockWidth\": 5, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"astc-5x4-unorm-srgb\": { \"blockWidth\": 5, \"blockHeight\": 4, \"bytesPerBlock\": 16 },\r\n  \"astc-5x5-unorm\": { \"blockWidth\": 5, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-5x5-unorm-srgb\": { \"blockWidth\": 5, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-6x5-unorm\": { \"blockWidth\": 6, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-6x5-unorm-srgb\": { \"blockWidth\": 6, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-6x6-unorm\": { \"blockWidth\": 6, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-6x6-unorm-srgb\": { \"blockWidth\": 6, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-8x5-unorm\": { \"blockWidth\": 8, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-8x5-unorm-srgb\": { \"blockWidth\": 8, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-8x6-unorm\": { \"blockWidth\": 8, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-8x6-unorm-srgb\": { \"blockWidth\": 8, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-8x8-unorm\": { \"blockWidth\": 8, \"blockHeight\": 8, \"bytesPerBlock\": 16 },\r\n  \"astc-8x8-unorm-srgb\": { \"blockWidth\": 8, \"blockHeight\": 8, \"bytesPerBlock\": 16 },\r\n  \"astc-10x5-unorm\": { \"blockWidth\": 10, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-10x5-unorm-srgb\": { \"blockWidth\": 10, \"blockHeight\": 5, \"bytesPerBlock\": 16 },\r\n  \"astc-10x6-unorm\": { \"blockWidth\": 10, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-10x6-unorm-srgb\": { \"blockWidth\": 10, \"blockHeight\": 6, \"bytesPerBlock\": 16 },\r\n  \"astc-10x8-unorm\": { \"blockWidth\": 10, \"blockHeight\": 8, \"bytesPerBlock\": 16 },\r\n  \"astc-10x8-unorm-srgb\": { \"blockWidth\": 10, \"blockHeight\": 8, \"bytesPerBlock\": 16 },\r\n  \"astc-10x10-unorm\": { \"blockWidth\": 10, \"blockHeight\": 10, \"bytesPerBlock\": 16 },\r\n  \"astc-10x10-unorm-srgb\": { \"blockWidth\": 10, \"blockHeight\": 10, \"bytesPerBlock\": 16 },\r\n  \"astc-12x10-unorm\": { \"blockWidth\": 12, \"blockHeight\": 10, \"bytesPerBlock\": 16 },\r\n  \"astc-12x10-unorm-srgb\": { \"blockWidth\": 12, \"blockHeight\": 10, \"bytesPerBlock\": 16 },\r\n  \"astc-12x12-unorm\": { \"blockWidth\": 12, \"blockHeight\": 12, \"bytesPerBlock\": 16 },\r\n  \"astc-12x12-unorm-srgb\": { \"blockWidth\": 12, \"blockHeight\": 12, \"bytesPerBlock\": 16 },\r\n};\r\n\r\nconst GPUObjectTypes = new Set([\r\n  GPUAdapter,\r\n  GPUDevice,\r\n  GPUBuffer,\r\n  GPUTexture,\r\n  GPUTextureView,\r\n  GPUExternalTexture,\r\n  GPUSampler,\r\n  GPUBindGroupLayout,\r\n  GPUBindGroup,\r\n  GPUPipelineLayout,\r\n  GPUShaderModule,\r\n  GPUComputePipeline,\r\n  GPURenderPipeline,\r\n  GPUCommandBuffer,\r\n  GPUCommandEncoder,\r\n  GPUComputePassEncoder,\r\n  GPURenderPassEncoder,\r\n  GPURenderBundle,\r\n  GPUQueue,\r\n  GPUQuerySet,\r\n  GPUCanvasContext\r\n]);\r\n\r\nclass GPUObjectWrapper {\r\n  constructor(idGenerator) {\r\n    this._idGenerator = idGenerator;\r\n    this.onPreCall = null;\r\n    this.onPostCall = null;\r\n    this.onPromise = null;\r\n    this.onPromiseResolve = null;\r\n    this._wrapGPUTypes();\r\n  }\r\n\r\n  _wrapGPUTypes() {\r\n    GPU.prototype.requestAdapter = this._wrapMethod(\"requestAdapter\", GPU.prototype.requestAdapter);\r\n    GPU.prototype.getPreferredFormat = this._wrapMethod(\"getPreferredFormat\", GPU.prototype.getPreferredFormat);\r\n\r\n    GPUAdapter.prototype.requestDevice = this._wrapMethod(\"requestDevice\", GPUAdapter.prototype.requestDevice);\r\n\r\n    GPUDevice.prototype.destroy = this._wrapMethod(\"destroy\", GPUDevice.prototype.destroy);\r\n    GPUDevice.prototype.createBuffer = this._wrapMethod(\"createBuffer\", GPUDevice.prototype.createBuffer);\r\n    GPUDevice.prototype.createTexture = this._wrapMethod(\"createTexture\", GPUDevice.prototype.createTexture);\r\n    GPUDevice.prototype.createSampler = this._wrapMethod(\"createSampler\", GPUDevice.prototype.createSampler);\r\n    GPUDevice.prototype.importExternalTexture = this._wrapMethod(\"importExternalTexture\", GPUDevice.prototype.importExternalTexture);\r\n    GPUDevice.prototype.createBindGroupLayout = this._wrapMethod(\"createBindGroupLayout\", GPUDevice.prototype.createBindGroupLayout);\r\n    GPUDevice.prototype.createPipelineLayout = this._wrapMethod(\"createPipelineLayout\", GPUDevice.prototype.createPipelineLayout);\r\n    GPUDevice.prototype.createBindGroup = this._wrapMethod(\"createBindGroup\", GPUDevice.prototype.createBindGroup);\r\n    GPUDevice.prototype.createShaderModule = this._wrapMethod(\"createShaderModule\", GPUDevice.prototype.createShaderModule);\r\n    GPUDevice.prototype.createComputePipeline = this._wrapMethod(\"createComputePipeline\", GPUDevice.prototype.createComputePipeline);\r\n    GPUDevice.prototype.createRenderPipeline = this._wrapMethod(\"createRenderPipeline\", GPUDevice.prototype.createRenderPipeline);\r\n    GPUDevice.prototype.createComputePipelineAsync = this._wrapMethod(\"createComputePipelineAsync\", GPUDevice.prototype.createComputePipelineAsync);\r\n    GPUDevice.prototype.createRenderPipelineAsync = this._wrapMethod(\"createRenderPipelineAsync\", GPUDevice.prototype.createRenderPipelineAsync);\r\n    GPUDevice.prototype.createCommandEncoder = this._wrapMethod(\"createCommandEncoder\", GPUDevice.prototype.createCommandEncoder);\r\n    GPUDevice.prototype.createRenderBundleEncoder = this._wrapMethod(\"createRenderBundleEncoder\", GPUDevice.prototype.createRenderBundleEncoder);\r\n    GPUDevice.prototype.createQuerySet = this._wrapMethod(\"createQuerySet\", GPUDevice.prototype.createQuerySet);\r\n\r\n    GPUBuffer.prototype.mapAsync = this._wrapMethod(\"mapAsync\", GPUBuffer.prototype.mapAsync);\r\n    GPUBuffer.prototype.getMappedRange = this._wrapMethod(\"getMappedRange\", GPUBuffer.prototype.getMappedRange);\r\n    GPUBuffer.prototype.unmap = this._wrapMethod(\"unmap\", GPUBuffer.prototype.unmap);\r\n    GPUBuffer.prototype.destroy = this._wrapMethod(\"destroy\", GPUBuffer.prototype.destroy);\r\n\r\n    GPUTexture.prototype.createView = this._wrapMethod(\"createView\", GPUTexture.prototype.createView);\r\n    GPUTexture.prototype.destroy = this._wrapMethod(\"destroy\", GPUTexture.prototype.destroy);\r\n\r\n    GPUShaderModule.prototype.getCompilationInfo = this._wrapMethod(\"getCompilationInfo\", GPUShaderModule.prototype.getCompilationInfo);\r\n\r\n    GPUComputePipeline.prototype.getBindGroupLayout = this._wrapMethod(\"getBindGroupLayout\", GPUComputePipeline.prototype.getBindGroupLayout);\r\n\r\n    GPURenderPipeline.prototype.getBindGroupLayout = this._wrapMethod(\"getBindGroupLayout\", GPURenderPipeline.prototype.getBindGroupLayout);\r\n\r\n    GPUCommandEncoder.prototype.beginRenderPass = this._wrapMethod(\"beginRenderPass\", GPUCommandEncoder.prototype.beginRenderPass);\r\n    GPUCommandEncoder.prototype.beginComputePass = this._wrapMethod(\"beginComputePass\", GPUCommandEncoder.prototype.beginComputePass);\r\n    GPUCommandEncoder.prototype.copyBufferToBuffer = this._wrapMethod(\"copyBufferToBuffer\", GPUCommandEncoder.prototype.copyBufferToBuffer);\r\n    GPUCommandEncoder.prototype.copyBufferToTexture = this._wrapMethod(\"copyBufferToTexture\", GPUCommandEncoder.prototype.copyBufferToTexture);\r\n    GPUCommandEncoder.prototype.copyTextureToBuffer = this._wrapMethod(\"copyTextureToBuffer\", GPUCommandEncoder.prototype.copyTextureToBuffer);\r\n    GPUCommandEncoder.prototype.copyTextureToTexture = this._wrapMethod(\"copyTextureToTexture\", GPUCommandEncoder.prototype.copyTextureToTexture);\r\n    GPUCommandEncoder.prototype.clearBuffer = this._wrapMethod(\"clearBuffer\", GPUCommandEncoder.prototype.clearBuffer);\r\n    GPUCommandEncoder.prototype.resolveQuerySet = this._wrapMethod(\"resolveQuerySet\", GPUCommandEncoder.prototype.resolveQuerySet);\r\n    GPUCommandEncoder.prototype.finish = this._wrapMethod(\"finish\", GPUCommandEncoder.prototype.finish);\r\n    GPUCommandEncoder.prototype.pushDebugGroup = this._wrapMethod(\"pushDebugGroup\", GPUCommandEncoder.prototype.pushDebugGroup);\r\n    GPUCommandEncoder.prototype.popDebugGroup = this._wrapMethod(\"popDebugGroup\", GPUCommandEncoder.prototype.popDebugGroup);\r\n    GPUCommandEncoder.prototype.insertDebugMarker = this._wrapMethod(\"insertDebugMarker\", GPUCommandEncoder.prototype.insertDebugMarker);\r\n\r\n    GPUComputePassEncoder.prototype.setPipeline = this._wrapMethod(\"setPipeline\", GPUComputePassEncoder.prototype.setPipeline);\r\n    GPUComputePassEncoder.prototype.dispatchWorkgroups = this._wrapMethod(\"dispatchWorkgroups\", GPUComputePassEncoder.prototype.dispatchWorkgroups);\r\n    GPUComputePassEncoder.prototype.dispatchWorkgroupsIndirect = this._wrapMethod(\"dispatchWorkgroupsIndirect\", GPUComputePassEncoder.prototype.dispatchWorkgroupsIndirect);\r\n    GPUComputePassEncoder.prototype.end = this._wrapMethod(\"end\", GPUComputePassEncoder.prototype.end);\r\n    GPUComputePassEncoder.prototype.setBindGroup = this._wrapMethod(\"setBindGroup\", GPUComputePassEncoder.prototype.setBindGroup);\r\n    GPUComputePassEncoder.prototype.setBindGroup = this._wrapMethod(\"setBindGroup\", GPUComputePassEncoder.prototype.setBindGroup);\r\n    GPUComputePassEncoder.prototype.pushDebugGroup = this._wrapMethod(\"pushDebugGroup\", GPUComputePassEncoder.prototype.pushDebugGroup);\r\n    GPUComputePassEncoder.prototype.popDebugGroup = this._wrapMethod(\"popDebugGroup\", GPUComputePassEncoder.prototype.popDebugGroup);\r\n    GPUComputePassEncoder.prototype.insertDebugMarker = this._wrapMethod(\"insertDebugMarker\", GPUComputePassEncoder.prototype.insertDebugMarker);\r\n\r\n    GPURenderPassEncoder.prototype.setViewport = this._wrapMethod(\"setViewport\", GPURenderPassEncoder.prototype.setViewport);\r\n    GPURenderPassEncoder.prototype.setScissorRect = this._wrapMethod(\"setScissorRect\", GPURenderPassEncoder.prototype.setScissorRect);\r\n    GPURenderPassEncoder.prototype.setBlendConstant = this._wrapMethod(\"setBlendConstant\", GPURenderPassEncoder.prototype.setBlendConstant);\r\n    GPURenderPassEncoder.prototype.setStencilReference = this._wrapMethod(\"setStencilReference\", GPURenderPassEncoder.prototype.setStencilReference);\r\n    GPURenderPassEncoder.prototype.beginOcclusionQuery = this._wrapMethod(\"beginOcclusionQuery\", GPURenderPassEncoder.prototype.beginOcclusionQuery);\r\n    GPURenderPassEncoder.prototype.endOcclusionQuery = this._wrapMethod(\"endOcclusionQuery\", GPURenderPassEncoder.prototype.endOcclusionQuery);\r\n    GPURenderPassEncoder.prototype.executeBundles = this._wrapMethod(\"executeBundles\", GPURenderPassEncoder.prototype.executeBundles);\r\n    GPURenderPassEncoder.prototype.end = this._wrapMethod(\"end\", GPURenderPassEncoder.prototype.end);\r\n    GPURenderPassEncoder.prototype.setPipeline = this._wrapMethod(\"setPipeline\", GPURenderPassEncoder.prototype.setPipeline);\r\n    GPURenderPassEncoder.prototype.setIndexBuffer = this._wrapMethod(\"setIndexBuffer\", GPURenderPassEncoder.prototype.setIndexBuffer);\r\n    GPURenderPassEncoder.prototype.setVertexBuffer = this._wrapMethod(\"setVertexBuffer\", GPURenderPassEncoder.prototype.setVertexBuffer);\r\n    GPURenderPassEncoder.prototype.draw = this._wrapMethod(\"draw\", GPURenderPassEncoder.prototype.draw);\r\n    GPURenderPassEncoder.prototype.drawIndexed = this._wrapMethod(\"drawIndexed\", GPURenderPassEncoder.prototype.drawIndexed);\r\n    GPURenderPassEncoder.prototype.drawIndirect = this._wrapMethod(\"drawIndirect\", GPURenderPassEncoder.prototype.drawIndirect);\r\n    GPURenderPassEncoder.prototype.drawIndexedIndirect = this._wrapMethod(\"drawIndexedIndirect\", GPURenderPassEncoder.prototype.drawIndexedIndirect);\r\n    GPURenderPassEncoder.prototype.setBindGroup = this._wrapMethod(\"setBindGroup\", GPURenderPassEncoder.prototype.setBindGroup);\r\n    GPURenderPassEncoder.prototype.pushDebugGroup = this._wrapMethod(\"pushDebugGroup\", GPURenderPassEncoder.prototype.pushDebugGroup);\r\n    GPURenderPassEncoder.prototype.popDebugGroup = this._wrapMethod(\"popDebugGroup\", GPURenderPassEncoder.prototype.popDebugGroup);\r\n    GPURenderPassEncoder.prototype.insertDebugMarker = this._wrapMethod(\"insertDebugMarker\", GPURenderPassEncoder.prototype.insertDebugMarker);\r\n\r\n    GPUQueue.prototype.submit = this._wrapMethod(\"submit\", GPUQueue.prototype.submit);\r\n    GPUQueue.prototype.writeBuffer = this._wrapMethod(\"writeBuffer\", GPUQueue.prototype.writeBuffer);\r\n    GPUQueue.prototype.writeTexture = this._wrapMethod(\"writeTexture\", GPUQueue.prototype.writeTexture);\r\n    GPUQueue.prototype.copyExternalImageToTexture = this._wrapMethod(\"copyExternalImageToTexture\", GPUQueue.prototype.copyExternalImageToTexture);\r\n\r\n    GPUQuerySet.prototype.destroy = this._wrapMethod(\"destroy\", GPUQuerySet.prototype.destroy);\r\n\r\n    GPUCanvasContext.prototype.configure = this._wrapMethod(\"configure\", GPUCanvasContext.prototype.configure);\r\n    GPUCanvasContext.prototype.unconfigure = this._wrapMethod(\"unconfigure\", GPUCanvasContext.prototype.unconfigure);\r\n    GPUCanvasContext.prototype.getCurrentTexture = this._wrapMethod(\"getCurrentTexture\", GPUCanvasContext.prototype.getCurrentTexture);\r\n  }\r\n\r\n  _wrapMethod(method, origMethod) {\r\n    const self = this;\r\n    return function () {\r\n      const object = this;\r\n\r\n      const args = [...arguments];\r\n\r\n      // Allow the arguments to be modified before the method is called.\r\n      if (self.onPreCall) {\r\n        self.onPreCall(object, method, args);\r\n      }\r\n\r\n      // Call the original method\r\n      const result = origMethod.call(object, ...args);\r\n\r\n      // If it was an async method it will have returned a Promise\r\n      if (result instanceof Promise) {\r\n        const id = self._idGenerator.getNextId(object);\r\n        if (self.onPromise) {\r\n          self.onPromise(object, method, args, id);\r\n        }\r\n        const promise = result;\r\n        const wrappedPromise = new Promise((resolve) => {\r\n          promise.then((result) => {\r\n            if (self.onPromiseResolve) {\r\n              self.onPromiseResolve(object, method, args, id, result);\r\n            }\r\n            resolve(result);\r\n          });\r\n        });\r\n        return wrappedPromise;\r\n      }\r\n\r\n      // Otherwise it\"s a synchronous method\r\n      if (self.onPostCall) {\r\n        self.onPostCall(object, method, args, result);\r\n      }\r\n\r\n      return result;\r\n    };\r\n  }\r\n}\r\n\r\n\r\nfunction main() {\r\n  // If the script tag has a filename attribute, then auto start recording.\r\n  const script = document.getElementById(\"__webgpu_recorder\");\r\n  if (script) {\r\n    const filename = script.getAttribute(\"filename\");\r\n    const frames = script.getAttribute(\"frames\");\r\n    const messageRecording = script.getAttribute(\"messageRecording\");\r\n    const removeUnusedResources = script.getAttribute(\"removeUnusedResources\");\r\n    if (filename) {\r\n      new WebGPURecorder({\r\n        \"frames\": frames || 1,\r\n        \"export\": filename,\r\n        \"removeUnusedResources\": !!removeUnusedResources,\r\n        \"messageRecording\": !!messageRecording\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nmain();\r\n"],"names":["WebGPURecorder","constructor","options","this","config","maxFrameCount","Math","max","frames","exportName","export","canvasWidth","width","canvasHeight","height","removeUnusedResources","messageRecording","_objectIndex","_initalized","_initializeCommands","_frameCommands","_frameObjects","_currentFrameCommands","_currentFrameObjects","_frameIndex","_isRecording","_frameVariables","_arrayCache","_totalData","_initializeObjects","Set","_adapter","_unusedTextures","_unusedTextureViews","Map","_unusedBuffers","_dataCacheObjects","navigator","gpu","_gpuWrapper","GPUObjectWrapper","onPromiseResolve","_onAsyncResolve","bind","onPreCall","_preMethodCall","onPostCall","_onMethodCall","_registerObject","_recordLine","_getObjectVariable","_wrapCanvases","self","__createElement","document","createElement","type","element","call","_wrapCanvas","__requestAnimationFrame","window","requestAnimationFrame","cb","_frameStart","performance","now","_frameEnd","getNextId","push","generateOutput","_removeUnusedCommands","objects","commands","unusedObjects","i","length","object","has","__id","add","key","value","filter","cmd","obj","di","dl","dataObj","li","splice","array","Uint8Array","s","_getVariableDeclarations","join","fi","fl","promises","ai","a","Promise","resolve","_encodeDataUrl","then","b64","all","_downloadFile","bytes","buffer","byteOffset","byteLength","reject","reader","Object","assign","FileReader","onload","result","onerror","error","readAsDataURL","File","data","filename","link","href","URL","createObjectURL","Blob","download","body","appendChild","click","removeChild","maxMessageSize","postMessage","action","index","count","startIndex","dataLength","messageIndex","messageCount","ceil","remainder","size","dataChunk","substr","c","__getContext","getContext","a1","a2","ret","_wrapContext","canvases","getElementsByTagName","id","__frame","_isFrameVariable","frame","name","_removeVariable","f","delete","_addVariable","GPUCanvasContext","undefined","replace","ctx","_getBytesFromImageSource","src","canvas","c2d","drawImage","getImageData","method","args","adapter","_recordCommand","__mappedRanges","cacheIndex","_getDataCache","source","bytesPerPixel","bytesPerRow","texture","_stringifyObject","first","get","desc","view","__data","Array","_stringifyArray","_stringifyArgs","heap","offset","_heapAccessShiftForWebGPUHeap","BYTES_PER_ELEMENT","clz32","_compareCacheData","l","arrayCopy","from","blockWidth","blockHeight","bytesPerBlock","_formatInfo","format","widthInBlocks","totalRows","rowsPerImage","depthOrArrayLayers","offsets","entries","entry","argStrings","line","async","hasAdapter","set","GPUDevice","q","queue","_asyncMethods","_skipMethods","r8unorm","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","stencil8","depth16unorm","depth32float","depth24plus","GPUAdapter","GPUBuffer","GPUTexture","GPUTextureView","GPUExternalTexture","GPUSampler","GPUBindGroupLayout","GPUBindGroup","GPUPipelineLayout","GPUShaderModule","GPUComputePipeline","GPURenderPipeline","GPUCommandBuffer","GPUCommandEncoder","GPUComputePassEncoder","GPURenderPassEncoder","GPURenderBundle","GPUQueue","GPUQuerySet","idGenerator","_idGenerator","onPromise","_wrapGPUTypes","GPU","prototype","requestAdapter","_wrapMethod","getPreferredFormat","requestDevice","destroy","createBuffer","createTexture","createSampler","importExternalTexture","createBindGroupLayout","createPipelineLayout","createBindGroup","createShaderModule","createComputePipeline","createRenderPipeline","createComputePipelineAsync","createRenderPipelineAsync","createCommandEncoder","createRenderBundleEncoder","createQuerySet","mapAsync","getMappedRange","unmap","createView","getCompilationInfo","getBindGroupLayout","beginRenderPass","beginComputePass","copyBufferToBuffer","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","clearBuffer","resolveQuerySet","finish","pushDebugGroup","popDebugGroup","insertDebugMarker","setPipeline","dispatchWorkgroups","dispatchWorkgroupsIndirect","end","setBindGroup","setViewport","setScissorRect","setBlendConstant","setStencilReference","beginOcclusionQuery","endOcclusionQuery","executeBundles","setIndexBuffer","setVertexBuffer","draw","drawIndexed","drawIndirect","drawIndexedIndirect","submit","writeBuffer","writeTexture","copyExternalImageToTexture","configure","unconfigure","getCurrentTexture","origMethod","arguments","promise","wrappedPromise","script","getElementById","getAttribute","main"],"mappings":"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"}